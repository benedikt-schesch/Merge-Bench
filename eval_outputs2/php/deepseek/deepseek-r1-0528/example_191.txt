<think>
No reasoning found</think>
The merge conflict involves two different mock class paths for `$scheduleService`. The HEAD branch uses `'Indatus\Dispatcher\Services\ScheduleService'`, while the other branch uses `'Indatus\Dispatcher\Drivers\Cron\ScheduleService'`. 

After analyzing the context:
1. The binding `$this->app->instance('Indatus\Dispatcher\Services\ScheduleService', $scheduleService)` uses the namespace from HEAD
2. The `CommandService` dependency injection expects a `ScheduleService` type
3. The `Drivers\Cron` path suggests a driver-specific implementation, but the binding requires the base service interface

This appears to be an architectural change where the driver-specific implementation should likely be used, but the binding remains unchanged. However, without additional context about the framework's service container and interface implementations, the resolution is ambiguous.

Here is the original snippet with the conflict preserved:

```php
            function ($m) use ($scheduledCommand, $scheduler) {
                $item = m::mock('Indatus\Dispatcher\QueueItem');
                $item->shouldReceive('getCommand')->once()->andReturn($scheduledCommand);
                $m->shouldReceive('flush')->once()->andReturn([$item]);
            });
<<<<<<< HEAD
        $scheduleService = m::mock('Indatus\Dispatcher\Services\ScheduleService');
=======
        $scheduleService = m::mock('Indatus\Dispatcher\Drivers\Cron\ScheduleService');
>>>>>>> 8a08444b80550a21aa79eb24c96872111fe9cd01
        $scheduleService->shouldReceive('getQueue')->once()->andReturn($queue);
        $this->app->instance('Indatus\Dispatcher\Services\ScheduleService', $scheduleService);

        $commandService = m::mock('Indatus\Dispatcher\Services\CommandService[runnableInEnvironment,run]',
            [$scheduleService],
```