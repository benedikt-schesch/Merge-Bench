<think>
No reasoning found</think>
Looking at this merge conflict, I need to understand the semantic intent of both sides:

- **HEAD**: Uses `$loop->defer()` to execute the callback immediately in the next tick
- **Other branch**: Uses `$loop->delay(1, ...)` to execute the callback after a 1ms delay

Both sides are trying to schedule the execution of the same callback that:
1. Sends a SIGUSR1 signal to the current process
2. Sets up another delay to stop the loop after 10ms

The key difference is timing - immediate execution vs 1ms delay. Given this is in a signal handling test context and both sides have the same core functionality, the more conservative approach that ensures proper signal handling setup would be to use the 1ms delay. This gives the event loop time to properly register and enable all signal handlers before triggering the signal.

Here's the resolved conflict:

```php
            $loop->enable($sig1);
            $loop->cancel($sig3);
            $loop->onSignal(SIGUSR1, $f(2));
            $loop->defer(function () use ($loop, $sig2): void {
                $loop->enable($sig2);
                $loop->delay(1, function () use ($loop) {
                    \posix_kill(\getmypid(), \SIGUSR1);
                    $loop->delay($msDelay = 10, function () use ($loop): void {
                        $loop->stop();
                    });
                });

```