<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to set up the same exception expectation, but using different PHPUnit syntax:

- The HEAD (current branch) uses the newer PHPUnit syntax with `expectException()` and `expectExceptionMessage()`
- The incoming branch uses the older deprecated `setExpectedException()` method

Since both sides have the same intent (expecting an `AccessDeniedException` with the message 'This user does not have access to this section.'), and the HEAD version uses the more modern PHPUnit API, the conflict should be resolved by keeping the HEAD version.

Here's the resolved code:

```php
            ->expects($this->at(0))
            ->method('getUser')
            ->willReturn(null)
        ;

        $this->expectException(AccessDeniedException::class);
        $this->expectExceptionMessage('This user does not have access to this section.');

        $this->instance->authorizeAction($this->request);
    }

    public function testAuthorizeActionWillRenderTemplate()

```