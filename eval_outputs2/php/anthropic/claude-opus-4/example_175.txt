<think>
No reasoning found</think>
Looking at this merge conflict, I need to understand the semantic intent of both sides:

- HEAD (current branch): Uses `new Table()` as a parameter
- Incoming change: Uses `$this->console` as a parameter

Based on the context, this appears to be a test method (`testLogNotScheduled`) that's mocking a `ScheduleService`. The conflict is about what parameter to pass to the mock.

Without more context about the broader changes in both branches, I cannot determine which approach is correct or if both changes need to be combined in some way. The intent is ambiguous - one branch might be refactoring to use a Table object directly, while the other might be refactoring to use a console property.

Here's the snippet with the conflict preserved:

```php

    public function testLogNotScheduled()
    {
        $command = m::mock('Indatus\Dispatcher\Scheduling\ScheduledCommand');
        $scheduleService = m::mock('Indatus\Dispatcher\Services\ScheduleService[getScheduledCommands,isDue]', [
<<<<<<< HEAD
                new Table()
=======
                $this->console
>>>>>>> 8a08444b80550a21aa79eb24c96872111fe9cd01
            ], function ($m) use (&$command) {
                $scheduler = m::mock('Indatus\Dispatcher\Scheduling\Schedulable');
                $command->shouldReceive('schedule')->once()
                    ->andReturn($scheduler);


```