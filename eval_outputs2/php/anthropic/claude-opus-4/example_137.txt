<think>
No reasoning found</think>
Looking at this merge conflict, I can see it's about whether to include a `@return void` annotation in the PHPDoc block for what appears to be a constructor method.

Both sides have valid approaches:
- HEAD (current branch): Omits the `@return void` annotation
- The incoming change: Adds `@return void` annotation

Since this is a constructor method (as evidenced by `__construct`), and constructors in PHP don't have explicit return types, the semantic intent is clear. Modern PHP coding standards often omit `@return void` for constructors since it's implicit, but some teams prefer to be explicit about it.

Without additional context about the project's coding standards, I'll preserve the conflict as requested:

```php
     * @param  \Illuminate\Auth\Passwords\TokenRepositoryInterface  $tokens
     * @param  \Illuminate\Contracts\Auth\UserProvider  $users
     * @param  \Illuminate\Contracts\Events\Dispatcher|null  $dispatcher
     * @param  \Illuminate\Support\Timebox|null  $timebox
     * @param  int  $timeboxDuration
<<<<<<< HEAD
=======
     * @return void
>>>>>>> 43bcb81c412ef988dd818891a50d859d577a2df6
     */
    public function __construct(
        #[\SensitiveParameter] TokenRepositoryInterface $tokens,
        UserProvider $users,
        ?Dispatcher $dispatcher = null,
```