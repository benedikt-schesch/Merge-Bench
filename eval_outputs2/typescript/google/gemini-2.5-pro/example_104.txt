<think>
No reasoning found</think>
Resolving the conflict requires understanding the intent of both changes.

*   The `HEAD` branch introduces a conditional check `if (state !== MatchMakerState.SHUTTING_DOWN)` but contains a likely bug by decrementing `stats.local.roomCount` a second time.
*   The `1a7da98c...` branch also introduces a conditional check `if (!isGracefullyShuttingDown)`, which is semantically equivalent to the check in `HEAD`. However, instead of decrementing the count again, it calls `stats.persist()`.

The shared intent is to execute logic only when the server is not in the process of shutting down. The `1a7da98c...` branch has the more logical implementation: it avoids persisting stats during a shutdown, which is a common optimization. The `HEAD` branch's duplicate decrement is almost certainly an error.

The resolution is to combine the shared conditional logic with the correct action from the `1a7da98c...` branch.

```typescript
  //
  room.listing.remove();
  stats.local.roomCount--;

  // decrease amount of rooms this process is handling
  if (!isGracefullyShuttingDown) {
    stats.persist();

    // remove from devMode restore list
    if (isDevMode) {
      await presence.hdel(getRoomRestoreListKey(), room.roomId);

```