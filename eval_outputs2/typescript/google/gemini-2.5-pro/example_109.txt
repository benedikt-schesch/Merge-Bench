<think>
No reasoning found</think>
Resolving this merge conflict involves combining the semantic intents of both branches.

-   **HEAD branch intent:** To access the private `_enqueuedMessages` property using a more explicit TypeScript type assertion (`as unknown as ClientPrivate`) rather than suppressing a compiler error.
-   **`1a7da98c...` branch intent:** To modernize the promise rejection by using the standard `Promise.reject()` and wrapping the rejection reason in an `Error` object, which is a best practice.

The best resolution combines these two improvements: it uses the explicit type assertion from `HEAD` and the modern promise rejection pattern from `1a7da98c...`. Additionally, using the slightly more descriptive error message `'client not joined'` from `HEAD` is preferable.

```typescript
    //
    // Return rejected promise if client has never fully JOINED.
    //
    // (having `_enqueuedMessages !== undefined` means that the client has never been at "ClientState.JOINED" state)
    //
    if ((previousClient as unknown as ClientPrivate)._enqueuedMessages !== undefined) {
      return Promise.reject(new Error('client not joined'));
    }

    if (seconds === undefined) { // TODO: remove this check
      console.warn("DEPRECATED: allowReconnection() requires a second argument. Using \"manual\" mode.");
      seconds = "manual";

```