<think>
No reasoning found</think>
Resolving this merge conflict requires combining the semantic intents of both branches.

*   The `HEAD` branch's intent is to allow the `handler` argument to be optional for specific events (e.g., `emitter.off('event-name')` to remove all listeners for `event-name`), but it does so by weakening the type definitions.
*   The `f0f36b09df3...` branch's intent is to strengthen the type safety of the `off` method to be consistent with the `on` and `emit` methods, ensuring that event names and handler signatures are correctly typed based on the `Events` generic.

The best resolution combines the feature from `HEAD` (optional handler) with the improved type safety from the incoming branch. Both branches also agree that when removing a wildcard (`*`) listener, the specific handler must be provided.

The resolved code will:
1.  Use the strongly-typed signature `<Key extends keyof Events>` from the incoming branch.
2.  Make the `handler` for specific events optional (`?`) as intended by `HEAD`.
3.  Use the strongly-typed wildcard handler `WildcardHandler<Events>` from the incoming branch, keeping the handler non-optional as it is in both versions.

```typescript
	all: EventHandlerMap<Events>;

	on<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): void;
	on(type: '*', handler: WildcardHandler<Events>): void;

	off<Key extends keyof Events>(type: Key, handler?: Handler<Events[Key]>): void;
	off(type: '*', handler: WildcardHandler<Events>): void;

	emit<Key extends keyof Events>(type: Key, event: Events[Key]): void;
	emit<Key extends keyof Events>(type: undefined extends Events[Key] ? Key : never): void;
}


```