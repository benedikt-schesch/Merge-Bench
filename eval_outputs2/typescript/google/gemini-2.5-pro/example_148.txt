<think>
No reasoning found</think>
Resolving this merge conflict requires understanding the semantic intents of both changes.

*   **HEAD's Intent**: To provide a highly specific and type-safe set of options for the `icon` prop. It explicitly lists `boolean` (likely for toggling a default icon), a render function, a typed `React.ReactElement` that must accept `IconProps`, and primitive identifiers like `string` and `number`. This approach prioritizes type safety and clarity.

*   **f490d04dc...'s Intent**: To generalize the prop type using the standard `React.ReactNode`, which is a common pattern for "renderable" props in React. This simplifies the type definition but loses some of the specificity of the `HEAD` version, such as the special meaning of `true` (as a `React.ReactNode`, `true` renders nothing) and the guarantee that a passed `React.ReactElement` can handle `IconProps`. The change to `iconProps` in the function signature is a minor improvement for clarity.

The best resolution combines the strengths of both sides: the type safety and explicit semantics from `HEAD`, and the improved naming from the right side. The an `icon` prop is often used to pass props to the icon component (as evidenced by the render function `(props: IconProps) => ...` present in both versions). Therefore, retaining the specific `React.ReactElement<IconProps>` from `HEAD` is safer than the generic `React.ReactNode` which does not carry this constraint.

The final merged code adopts the specific and safe type structure from `HEAD` while incorporating the more descriptive `iconProps` parameter name from the other branch.

```typescript

  /**
   * Used to display a custom icon. Set it to `false` to prevent
   * the icons from being displayed
   */
  icon?:
    | boolean
    | ((iconProps: IconProps) => React.ReactNode)
    | React.ReactElement<IconProps>
    | string
    | number;

  /**
   * Theme to use.
   * `One of: 'light', 'dark', 'colored'`
   * `Default: 'light'`

```