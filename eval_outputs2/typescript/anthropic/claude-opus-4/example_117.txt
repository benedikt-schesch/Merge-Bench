<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to improve the type safety of the `off` method, but in different ways:

- **HEAD**: Uses a generic type parameter `T` with `any` as default, which is more flexible but less type-safe
- **Incoming change**: Uses the same pattern as the `on` method above it, with `Key extends keyof Events` and proper type constraints

The incoming change appears to be the correct resolution because:
1. It maintains consistency with the `on` method signature pattern
2. It provides proper type safety by constraining the handler type to match the event type
3. It follows the same pattern used in the `emit` method below

Here's the resolved code:

```typescript
	all: EventHandlerMap<Events>;

	on<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): void;
	on(type: '*', handler: WildcardHandler<Events>): void;

	off<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): void;
	off(type: '*', handler: WildcardHandler<Events>): void;

	emit<Key extends keyof Events>(type: Key, event: Events[Key]): void;
	emit<Key extends keyof Events>(type: undefined extends Events[Key] ? Key : never): void;
}


```