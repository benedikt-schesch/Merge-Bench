<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to check if Ollama is properly configured before setting it up. The conflict is about which function to use for the check:

- HEAD uses: `hasValidApiKey(envContent, 'OLLAMA_API_ENDPOINT')`
- The incoming change uses: `hasValidOllamaEndpoint(envContent)`

Both sides have the same intent - to check if Ollama endpoint is configured. The incoming change appears to use a more specific function `hasValidOllamaEndpoint` which is likely a dedicated function for checking Ollama configuration, while HEAD uses a more generic `hasValidApiKey` function.

Since the incoming change uses a more semantically appropriate function name that clearly indicates it's checking for Ollama endpoint specifically, I'll resolve in favor of the incoming change:

```typescript
  }

  // Always set up Ollama as universal fallback (if not already configured)
  // This should happen regardless of interactive mode since Ollama is always included
  const envContent = existsSync(envFilePath) ? await fs.readFile(envFilePath, 'utf8') : '';
  if (!hasValidOllamaEndpoint(envContent)) {
    await setupEmbeddingModelConfig('ollama', envFilePath, true);
  }

  // Install AI model plugin
  if (aiModel === 'local') {

```