<think>
No reasoning found</think>
Looking at this merge conflict, I need to understand what both sides are trying to achieve:

- **HEAD (left side)**: Passes `args` directly to the method
- **Right side**: Maps over `args` and converts each argument to a string, with a fallback to empty string if the argument is null/undefined

The semantic intent appears to be:
- The right side is adding defensive programming to ensure all arguments are strings and handling potential null/undefined values
- This is likely fixing a bug where non-string or null arguments were causing issues

Since the right side adds important null-safety and type conversion that the left side lacks, and this appears to be intentional defensive programming, the right side's changes should be kept.

```typescript
      try {
        await (
          locator[method as keyof Locator] as unknown as (
            ...args: string[]
          ) => Promise<void>
        )(...args.map((arg) => arg?.toString() || ""));
      } catch (e) {
        this.logger({
          category: "action",
          message: "error performing method",
          level: 1,
```