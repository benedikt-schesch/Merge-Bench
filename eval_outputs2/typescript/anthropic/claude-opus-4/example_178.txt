<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to achieve the same intent - they want to:
1. Authorize a new client with a code
2. Check if a client already exists
3. If it exists, close the new client and throw an error
4. If not, add it to the clients map

The key difference is that HEAD uses `userId` while the other branch uses `email` as the identifier. Based on the context and the fact that the `clients` map is being used to store unique clients, it appears the other branch (using `email`) is the more semantically correct approach, as email addresses are typically used as unique user identifiers in calendar systems.

Here's the resolved code:

```typescript
    return res
  }

  async newCalendarClient (user: User, code: string): Promise<CalendarClient> {
    const newClient = await CalendarClient.create(user, this.mongo, this.client, this)
    const email = await newClient.authorize(code)
    if (this.clients.has(email)) {
      newClient.close()
      throw new Error('Client already exist')
    }
    this.clients.set(email, newClient)
    return newClient
```