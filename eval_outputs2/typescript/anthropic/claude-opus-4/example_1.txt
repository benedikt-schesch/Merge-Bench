<think>
No reasoning found</think>
Looking at this merge conflict, I need to understand what both sides are trying to achieve:

- **HEAD**: Uses `map<AdapterContext>({...})` - appears to be using a custom `map` function to create a context
- **8458d55**: Uses `createContext<AdapterContext>({...})` with explicit typing `Context<AdapterContext>` - appears to be using a standard context creation function

Both sides are trying to create a context object with the same `AdapterContext` type and the same implementation (throwing an error). The semantic intent is the same - create a context that throws an error when `useAdapter` is called without proper setup.

Since the conflict appears to be about different ways of creating the same context (possibly due to a refactoring from `map` to `createContext` or vice versa), I cannot determine which approach is correct without knowing the broader codebase context and which API should be used.

Therefore, I'm returning the conflict as-is:

```typescript

export type AdapterContext = {
  useAdapter: UseAdapterHook
}

<<<<<<< HEAD
export const context = map<AdapterContext>({
=======
export const context: Context<AdapterContext> = createContext<AdapterContext>({
>>>>>>> 8458d55f197c8a6f60d2c01c2182c473c2a45c3c
  useAdapter() {
    throw new Error(error(404))
  }
})


```