<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to update the constructor parameter type for the `_event` property. 

- HEAD is using `types.EventDefinition`
- The incoming change is using `types.ApiEventDefinition`

Since both changes appear to be intentional type updates (likely part of a refactoring), and without more context about which type is the correct one to use, I cannot determine the semantic intent. This requires a decision from the developers about which type definition should be used.

Here's the snippet with the conflict preserved:

```typescript
import { Module, ReExportVariableModule } from '../../module'
import * as strings from '../../strings'
import * as types from './typings'

export class EventModule extends Module {
<<<<<<< HEAD
  public constructor(name: string, private _event: types.EventDefinition) {
=======
  public constructor(
    name: string,
    private _event: types.ApiEventDefinition
  ) {
>>>>>>> 2df15ac6924fdfb93d9f36cc4acbbb1042845bc6
    const eventName = name
    const exportName = strings.varName(eventName)
    super({ path: `${name}.ts`, exportName })
  }


```