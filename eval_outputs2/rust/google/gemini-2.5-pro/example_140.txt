<think>
No reasoning found</think>
An analysis of the conflict reveals that both sides are attempting to apply a TypeScript transformation to the program's abstract syntax tree (AST).

*   **`HEAD`** uses an older API, `program.mutate()`, and a version of `default_config` that only requires the script configuration. It also passes an `unresolved_mark` to the `typescript()` transformer.
*   **The incoming change (`24a95b48172836d31c55697037d5dada7d9c1ef7`)** uses a more modern SWC (the underlying compiler toolchain) API, `program.visit_mut_with()`. It also updates the call to `default_config` to include the `param.module_id`, providing more context for the transformation. Concurrently, it appears the `typescript()` transformer function was refactored to no longer require the `unresolved_mark`.

The intent of the incoming change is to update the code to a newer, more robust API and provide better contextual information for the TypeScript compilation, which is the correct path forward. The `HEAD` branch contains outdated code. Therefore, the correct resolution is to accept the incoming changes entirely.

```rust
      farmfe_core::module::ModuleType::Js => {}
      farmfe_core::module::ModuleType::Jsx => {
        // Do nothing, jsx should be handled by other plugins
      }
      farmfe_core::module::ModuleType::Ts => {
        program.visit_mut_with(&mut typescript(
          default_config(&context.config.script, param.module_id),
          top_level_mark,
        ));
      }
      farmfe_core::module::ModuleType::Tsx => {
        let comments: SingleThreadedComments = param.meta.as_script().comments.clone().into();

```