<think>
No reasoning found</think>
Both sides of this merge conflict are applying optimizations to the execution plan.

- The `HEAD` branch introduces two physical optimizers: `JoinSelection` and `AggregateStatistics`. It creates a `SessionConfig` and applies both optimizations sequentially.
- The `01bcf7c43e0e8ac729099d83fcc50017c276ebc4` branch introduces only the `JoinSelection` optimizer and uses a slightly different syntax to pass the configuration options.

The semantic intent of `HEAD` is to add a new `AggregateStatistics` optimization pass in addition to the existing `JoinSelection` pass. This is a superset of the other branch's intent. The most logical resolution is to incorporate both optimization steps, as done in the `HEAD` branch.

```rust
            &input_locations,
        )?;

        // Optimize plan based on new resolved statistics
        let optimize_join = JoinSelection::new();
        let optimize_aggregate = AggregateStatistics::new();

        let cfg: SessionConfig = SessionConfig::new();

        let plan: Arc<dyn ExecutionPlan> = optimize_join.optimize(plan, &cfg)?;
        let plan: Arc<dyn ExecutionPlan> = optimize_aggregate.optimize(plan, &cfg)?;

        Ok(ResolvedStage::new(
            self.stage_id,
            self.stage_attempt_num,
            plan,

```