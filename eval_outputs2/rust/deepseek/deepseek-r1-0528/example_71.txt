<think>
No reasoning found</think>
```rust
    }

    fn default_config() {}
}

impl<'w, 's, T: Resource> SystemParamFetch<'w, 's> for OptionResState<T> {
    type Item = Option<Res<'w, T>>;

    #[inline]
    unsafe fn get_param(
        state: &'s mut Self,
```

**Resolution Explanation:**  
The conflict arises from differing trait bounds (`Resource` vs `Component`). After analyzing:

1. `Res<'w, T>` indicates this is for **resources** (not components)
2. Bevy's ECS distinguishes:
   - `Resource`: Global singleton data
   - `Component`: Entity-associated data
3. The `OptionResState` name implies resource handling
4. `Res<T>` requires `T: Resource` in Bevy's type system

Choosing `Resource` maintains correctness while preserving the original intent to handle optional resources. The branch change to `Component` appears to be an incorrect contextual shift.