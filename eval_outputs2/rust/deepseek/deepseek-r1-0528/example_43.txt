<think>
No reasoning found</think>
I've analyzed the merge conflict and determined that the intent is ambiguous. The conflict involves different trait requirements for the generic type `T` in the `add_state` method. Since I cannot determine the correct resolution without knowing the project's specific requirements, I'm returning the snippet with the conflict markers preserved as requested.

```rust
    /// Each stage that uses `State<T>` for system run criteria needs a driver. If you need to use
    /// your state in a different stage, consider using [Self::add_state_to_stage] or manually
    /// adding [State::get_driver] to additional stages you need it in.
    pub fn add_state<T>(&mut self, initial: T) -> &mut Self
    where
<<<<<<< HEAD
        T: StateData,
=======
        T: Component + Debug + Clone + Eq + Hash,
>>>>>>> 65e834ce8d5142f1a01d06c2a9e4e7ef4a1238a9
    {
        self.add_state_to_stage(CoreStage::Update, initial)
    }

    /// Adds a new [State] with the given `initial` value.
```