<think>
No reasoning found</think>
Since the intent behind the conflicting changes is ambiguous without more context, I'm returning the original snippet with the conflict markers preserved. The key ambiguity is:

1. The HEAD branch adds a closure parameter `f` for modifying config
2. The other branch has a simpler signature without this parameter
3. The function body doesn't use `f` in the visible portion, but it might be used later
4. There's no way to determine if the closure is essential or optional

Here's the original snippet with conflict markers:

```rust
};
use farmfe_core::config::Config;

#[allow(dead_code)]
#[cfg(test)]
<<<<<<< HEAD
fn test(file: String, crate_path: String, f: Option<impl Fn(&mut Config)>) {
=======
fn test(file: String, crate_path: String) {
>>>>>>> 24a95b48172836d31c55697037d5dada7d9c1ef7
  use common::{format_output_name, get_dir_config_files, try_merge_config_file};
  use farmfe_core::config::partial_bundling::PartialBundlingEnforceResourceConfig;

  let file_path_buf = PathBuf::from(file.clone());
  let create_path_buf = PathBuf::from(crate_path);
```