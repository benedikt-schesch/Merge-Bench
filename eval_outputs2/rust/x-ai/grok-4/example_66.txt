<think>
No reasoning found</think>
```rust
// Registered components must implement the `Reflect` and `FromWorld` traits.
// The `Reflect` trait enables serialization, deserialization, and dynamic property access.
// `Reflect` enable a bunch of cool behaviors, so its worth checking out the dedicated `reflect.rs`
// example. The `FromWorld` trait determines how your component is constructed when it loads.
// For simple use cases you can just implement the `Default` trait (which automatically implements
<<<<<<< HEAD
// FromResources). The simplest registered component just needs these two derives:
#[derive(Component, Reflect, Default)]
=======
// FromWorld). The simplest registered component just needs these two derives:
#[derive(Reflect, Default)]
>>>>>>> 65e834ce8d5142f1a01d06c2a9e4e7ef4a1238a9
#[reflect(Component)] // this tells the reflect derive to also reflect component behaviors
struct ComponentA {
    pub x: f32,
    pub y: f32,
}

```