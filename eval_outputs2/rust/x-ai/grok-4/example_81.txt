<think>
No reasoning found</think>
```rust
macro_rules! tuple_impl {
    ($($name: ident),*) => {
        /// SAFE: Component is returned in tuple-order. [Bundle::from_components] and [Bundle::get_components] use tuple-order
        unsafe impl<$($name: Component),*> Bundle for ($($name,)*) {
            #[allow(unused_variables)]
<<<<<<< HEAD
            fn component_ids(components: &mut Components, storages: &mut Storages) -> Vec<ComponentId> {
                vec![$(components.init_component::<$name>(storages)),*]
=======
            fn component_ids(components: &mut Components) -> Vec<ComponentId> {
                vec![$(components.get_or_insert_id::<$name>()),*]
>>>>>>> 65e834ce8d5142f1a01d06c2a9e4e7ef4a1238a9
            }

            #[allow(unused_variables, unused_mut)]
            #[allow(clippy::unused_unit)]
            unsafe fn from_components(mut func: impl FnMut() -> *mut u8) -> Self {

```