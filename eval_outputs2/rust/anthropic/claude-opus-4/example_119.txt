<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to import types related to values/variables, but they've reorganized the module structure differently:

- HEAD side has a `dynval` module with types `Coords`, `NumWithUnit`, `DynVal`, and `VarName`
- The other side has a `value` module with types `Coords`, `PrimVal`, and `VarName`

The semantic intent appears to be importing value/variable-related types that are used in the app. Based on the common types (`Coords` and `VarName`) and the module renaming pattern (`dynval` → `value`, `DynVal` → `PrimVal`), it seems like the codebase underwent a refactoring where:
- The module was renamed from `dynval` to `value`
- `DynVal` was renamed to `PrimVal`
- `NumWithUnit` might have been moved elsewhere or removed

Without more context about which direction the codebase is moving, I cannot definitively resolve this conflict. The resolution depends on whether the project is moving towards the `dynval` naming convention or the `value` naming convention.

```rust
use crate::{
    config,
    config::{window_definition::WindowName, AnchorPoint},
    display_backend, eww_state,
    script_var_handler::*,
<<<<<<< HEAD:crates/eww/src/app.rs
    dynval::{Coords, NumWithUnit, DynVal, VarName},
=======
    value::{Coords, PrimVal, VarName},
>>>>>>> db9e673b81d0d85dccc1aee2c8dd19cb7ca460e5:src/app.rs
    EwwPaths,
};
use anyhow::*;
use debug_stub_derive::*;
use gdk::WindowExt;

```