<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to define the same `shutdown_hooks` field, but with a slight difference:

- HEAD version: `Vec<Box<dyn FnOnce() -> BoxFuture<'static, ()>>>`
- Other version: `Vec<Box<dyn FnOnce() -> BoxFuture<'static, ()> + Send>>`

The semantic intent here is clear: the other branch is adding a `Send` bound to the trait object, which is a common requirement in Rust for types that need to be sent across thread boundaries. This is typically needed in async/server contexts where shutdown hooks might be executed from different threads.

Since this appears to be a server implementation that likely needs thread safety, and adding the `Send` bound is more restrictive (and thus safer), I'll resolve this by keeping the version with `+ Send`:

```rust
    make_codec: MkC,
    stat_tracer: Vec<TraceFn>,
    #[cfg(feature = "multiplex")]
    multiplex: bool,
    span_provider: SP,
    shutdown_hooks: Vec<Box<dyn FnOnce() -> BoxFuture<'static, ()> + Send>>,
    _marker: PhantomData<Req>,
}

impl<S, Req>
    Server<

```