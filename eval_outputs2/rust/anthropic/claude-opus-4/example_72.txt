<think>
No reasoning found</think>
Looking at this merge conflict, I need to understand the semantic intent of both sides:

- HEAD version: `T: Resource` - implies that `T` should be a Resource type
- Other version: `T: Component` - implies that `T` should be a Component type

Given that this is implementing `SystemParamFetch` for `ResMutState<T>` and the return type is `ResMut<'w, T>`, the semantically correct constraint should be `Resource`. The `ResMut` type is typically used for mutable access to resources in ECS systems, not components.

Here's the resolved code:

```rust
    }

    fn default_config() {}
}

impl<'w, 's, T: Resource> SystemParamFetch<'w, 's> for ResMutState<T> {
    type Item = ResMut<'w, T>;

    #[inline]
    unsafe fn get_param(
        state: &'s mut Self,

```