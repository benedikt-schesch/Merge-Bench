<think>
No reasoning found</think>
Looking at this merge conflict, I need to understand the semantic intent of both sides:

- HEAD wants `T: Resource`
- The incoming change wants `T: Component`

This appears to be a type constraint change for the generic parameter `T` in the `EventReader` implementation. Without more context about the broader changes in the codebase, it's difficult to determine which constraint is correct. Both `Resource` and `Component` are likely valid trait bounds in the system, but they represent different architectural decisions.

Since I cannot determine the correct semantic intent without understanding the broader context of these changes, I'm returning the snippet with the conflict preserved:

```rust
                    .map(map_instance_event_with_id),
            ),
    }
}

<<<<<<< HEAD
impl<'w, 's, T: Resource> EventReader<'w, 's, T> {
=======
impl<'w, 's, T: Component> EventReader<'w, 's, T> {
>>>>>>> 65e834ce8d5142f1a01d06c2a9e4e7ef4a1238a9
    /// Iterates over the events this EventReader has not seen yet. This updates the EventReader's
    /// event counter, which means subsequent event reads will not include events that happened
    /// before now.
    pub fn iter(&mut self) -> impl DoubleEndedIterator<Item = &T> {
        self.iter_with_id().map(|(event, _id)| event)

```