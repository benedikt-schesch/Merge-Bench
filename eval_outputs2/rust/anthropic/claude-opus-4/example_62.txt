<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to implement the same trait for `EntityCommands`, but with different ordering of the lifetime parameters.

In the HEAD version: `EntityCommands<'w, 's, 'a>`
In the incoming version: `EntityCommands<'s, 'w, 'a>`

The key difference is that the lifetime parameters `'w` and `'s` are swapped between the two versions. This appears to be a refactoring where the order of lifetime parameters was changed in the type definition of `EntityCommands`.

Since both implementations have the same intent (implementing `DespawnRecursiveExt` for `EntityCommands`) and the body of the implementation is identical, I should choose the version that matches the current definition of `EntityCommands` in the codebase. Without additional context about which parameter order is correct, I'll preserve the conflict as requested:

```rust
pub trait DespawnRecursiveExt {
    /// Despawns the provided entity and its children.
    fn despawn_recursive(self);
}

<<<<<<< HEAD
impl<'w, 's, 'a> DespawnRecursiveExt for EntityCommands<'w, 's, 'a> {
=======
impl<'s, 'w, 'a> DespawnRecursiveExt for EntityCommands<'s, 'w, 'a> {
>>>>>>> 65e834ce8d5142f1a01d06c2a9e4e7ef4a1238a9
    /// Despawns the provided entity and its children.
    fn despawn_recursive(mut self) {
        let entity = self.id();
        self.commands().add(DespawnRecursive { entity });
    }
```