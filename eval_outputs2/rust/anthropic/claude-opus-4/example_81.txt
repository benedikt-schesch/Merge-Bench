<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to update the `component_ids` method signature and implementation, but with different approaches:

- **HEAD**: Changes the method to take both `components: &mut Components` and `storages: &mut Storages`, and uses `components.init_component::<$name>(storages)` to initialize components
- **Other branch**: Keeps only `components: &mut Components` parameter but changes the method call to `components.get_or_insert_id::<$name>()`

Both changes appear to be refactoring the component initialization/retrieval mechanism. Without more context about the broader codebase changes, I cannot determine which approach is correct or if they need to be combined in some way. The intent is ambiguous as both sides seem to be achieving similar goals (getting component IDs) but through different APIs.

Here's the snippet with the conflict preserved:

```rust
macro_rules! tuple_impl {
    ($($name: ident),*) => {
        /// SAFE: Component is returned in tuple-order. [Bundle::from_components] and [Bundle::get_components] use tuple-order
        unsafe impl<$($name: Component),*> Bundle for ($($name,)*) {
            #[allow(unused_variables)]
<<<<<<< HEAD
            fn component_ids(components: &mut Components, storages: &mut Storages) -> Vec<ComponentId> {
                vec![$(components.init_component::<$name>(storages)),*]
=======
            fn component_ids(components: &mut Components) -> Vec<ComponentId> {
                vec![$(components.get_or_insert_id::<$name>()),*]
>>>>>>> 65e834ce8d5142f1a01d06c2a9e4e7ef4a1238a9
            }

            #[allow(unused_variables, unused_mut)]
            #[allow(clippy::unused_unit)]
            unsafe fn from_components(mut func: impl FnMut() -> *mut u8) -> Self {

```