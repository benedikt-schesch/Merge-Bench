<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to change the trait bound on the generic type `T` in the `EventReader` struct definition.

- HEAD wants `T: Resource`
- The incoming change wants `T: Component`

Without more context about the broader codebase changes, I cannot determine which trait bound is semantically correct. The conflict appears to be a fundamental disagreement about whether events should be treated as Resources or Components in this system.

Since the intent is ambiguous and I cannot determine which side is correct without understanding the larger architectural decisions being made, I'm returning the snippet with the conflict preserved:

```rust
    &event_instance.event
}

/// Reads events of type `T` in order and tracks which events have already been read.
#[derive(SystemParam)]
<<<<<<< HEAD
pub struct EventReader<'w, 's, T: Resource> {
=======
pub struct EventReader<'w, 's, T: Component> {
>>>>>>> 65e834ce8d5142f1a01d06c2a9e4e7ef4a1238a9
    last_event_count: Local<'s, (usize, PhantomData<T>)>,
    events: Res<'w, Events<T>>,
}

/// Sends events of type `T`.
```