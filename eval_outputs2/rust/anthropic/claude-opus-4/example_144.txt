<think>
No reasoning found</think>
Looking at this merge conflict, I can see that the HEAD branch is trying to import `tokio::prelude::Future` and `tokio::runtime::Runtime`, while the other branch (2cc67a0957b29b57e65c0234c31703b3868e29f7) has removed these imports.

The semantic intent appears to be that one side wants to use Tokio's async runtime capabilities, while the other side has decided to remove this dependency. Without more context about the broader changes in each branch, I cannot determine which approach is correct.

Since the intent is ambiguous without knowing the rest of the codebase changes, I'm returning the snippet with the conflict unresolved:

```rust
use std::ops::DerefMut;
use std::sync::atomic::{AtomicBool, AtomicU64, Ordering};
use std::sync::mpsc::{Receiver, SendError, Sender};
use std::sync::{mpsc, Arc};
use std::time::Instant;
<<<<<<< HEAD
use tokio::prelude::Future;
use tokio::runtime::Runtime;
=======
>>>>>>> 2cc67a0957b29b57e65c0234c31703b3868e29f7

// seems to be about 2.5 lines of text
const SCROLL_SPEED: f64 = 50.0;
#[cfg(not(target_os = "macos"))]
const BY_WORD_MODIFIER_KEY: glfw::Modifiers = glfw::Modifiers::Control;
```