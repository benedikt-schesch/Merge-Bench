<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to update the TypeScript transformation code, but with different approaches:

- **HEAD**: Changes from `visit_mut_with` to `mutate` method and uses `unresolved_mark`
- **Other branch**: Adds `param.module_id` as a second argument to `default_config` and keeps `top_level_mark`

The semantic intent appears to be:
1. Both sides want to transform TypeScript code
2. HEAD wants to use a different visitor pattern (`mutate` instead of `visit_mut_with`) and a different mark (`unresolved_mark`)
3. The other branch wants to pass additional context (`param.module_id`) to the configuration

To resolve this semantically, we should combine both changes: use the new `mutate` method pattern from HEAD while also including the `param.module_id` parameter from the other branch. We should also keep `unresolved_mark` from HEAD as it appears to be the intended mark to use.

```rust
      farmfe_core::module::ModuleType::Js => {}
      farmfe_core::module::ModuleType::Jsx => {
        // Do nothing, jsx should be handled by other plugins
      }
      farmfe_core::module::ModuleType::Ts => {
        program.mutate(&mut typescript(
          default_config(&context.config.script, param.module_id),
          unresolved_mark,
          top_level_mark,
        ));
      }
      farmfe_core::module::ModuleType::Tsx => {
        let comments: SingleThreadedComments = param.meta.as_script().comments.clone().into();

```