<think>
No reasoning found</think>
Looking at this merge conflict, I need to understand the semantic intent of both sides:

- HEAD: Uses `init_non_send<T: Any>` - suggests initializing a non-send component
- Other branch: Uses `get_or_insert_non_send_resource_id<T: Any>` - suggests getting or inserting a non-send resource

Both sides have the same implementation that calls `get_or_insert_resource_with` and creates a `ComponentDescriptor::new_non_send`. The conflict appears to be purely about naming.

Given that:
1. The implementation uses `get_or_insert_resource_with` (which aligns with get-or-insert semantics)
2. It returns a `ComponentId` 
3. It's dealing with resources (as evidenced by the method being called)

The more descriptive name `get_or_insert_non_send_resource_id` better captures what the method actually does compared to the generic `init_non_send`.

Here's the resolved code:

```rust
            })
        }
    }

    #[inline]
    pub fn get_or_insert_non_send_resource_id<T: Any>(&mut self) -> ComponentId {
        // SAFE: The [`ComponentDescriptor`] matches the [`TypeId`]
        unsafe {
            self.get_or_insert_resource_with(TypeId::of::<T>(), || {
                ComponentDescriptor::new_non_send::<T>(StorageType::default())
            })
```