<think>
No reasoning found</think>
I've analyzed the merge conflict and determined that the intent is ambiguous due to insufficient context. The conflict involves a `return 0;` statement that exists in one branch but not the other. Without knowing the function signature (return type) or full context of the surrounding code, I can't determine whether the return statement should be preserved. 

Here's the original code snippet with conflict markers preserved as requested:

```c
      }
    }
    raw->sent_console_eof = TRUE;
    raw_check_close(raw);
  }
<<<<<<< HEAD
  return 0;
=======
>>>>>>> 4348393f562c8011ebca43d6198e98638aa115b5
}

static void raw_receive(Plug plug, int urgent, char *data, int len)
{
  Raw raw = (Raw)plug;
```

Resolution requires knowing:
1. The return type of the function containing this code
2. Whether control flow should continue after `raw_check_close(raw)`
3. Why one branch added/removed the return statement

Without this information, I'm preserving the conflict exactly as provided.