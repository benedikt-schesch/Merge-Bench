<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to add a condition before calling `send_del_edge()`. 

The HEAD version adds a check for `report`, while the incoming change adds checks for both `report` and `!tunnelserver`. The semantic intent appears to be that the incoming change is more restrictive - it wants to ensure that `send_del_edge()` is only called when we should report AND when we're not in tunnelserver mode.

Here's the resolved version that preserves both intents:

```c

	if(c->socket)
		closesocket(c->socket);

	if(c->edge) {
		if(report && !tunnelserver)
			send_del_edge(broadcast, c->edge);

		edge_del(c->edge);

		/* Run MST and SSSP algorithms */

```