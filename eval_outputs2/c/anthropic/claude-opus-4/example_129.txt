<think>
No reasoning found</think>
Looking at this merge conflict, I need to analyze the semantic intent of both sides:

**HEAD version**: `return plug_receive(s->plug, atmark ? 0 : 1, buf, ret);`
- Returns the value from `plug_receive()`

**Incoming version**: `plug_receive(s->plug, atmark ? 0 : 1, buf, ret);`
- Calls `plug_receive()` but doesn't return its value

The key difference is whether to return the value from `plug_receive()` or not. Without more context about the function signature and how the return value is used, it's difficult to determine which approach is correct. The conflict appears to be a genuine semantic difference rather than a simple formatting issue.

Since the intent is ambiguous without knowing:
1. What the containing function's return type is
2. Whether the return value of `plug_receive()` is meaningful
3. How callers of this function use the return value

I'm returning the snippet with the conflict preserved:

```c
       */
      if (s->addr) {
        sk_addr_free(s->addr);
        s->addr = NULL;
      }
<<<<<<< HEAD
      return plug_receive(s->plug, atmark ? 0 : 1, buf, ret);
=======
      plug_receive(s->plug, atmark ? 0 : 1, buf, ret);
>>>>>>> 4348393f562c8011ebca43d6198e98638aa115b5
    }
    break;
  case 2: /* writable */
    if (!s->connected) {
      /*

```