<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to process edges in a similar way, but with some differences:

**HEAD version:**
- Uses explicit cast `(edge_t *)` for type safety
- Unconditionally sends `del_edge` broadcast

**Incoming version:**
- No explicit cast (relies on implicit conversion)
- Conditionally sends `del_edge` broadcast only if `!tunnelserver`

The semantic intent appears to be that the incoming change added a tunnelserver check to prevent broadcasting edge deletions when running in tunnelserver mode. This is a logical enhancement. The HEAD version's explicit cast is a good practice for type safety.

Here's the resolved version that combines both intents:

```c
				subnet_del(n, s);
			}

			for(enode = n->edge_tree->head; enode; enode = enext) {
				enext = enode->next;
				e = (edge_t *) enode->data;
				if(!tunnelserver)
					send_del_edge(broadcast, e);
				edge_del(e);
			}
		}
	}


```