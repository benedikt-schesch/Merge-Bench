<think>
No reasoning found</think>
Looking at this merge conflict, I need to analyze the semantic intent of both sides:

- The HEAD version assigns the return value of `pty_real_select_result()` to `ret` using a logical AND operation (`ret = ret && ...`)
- The other version simply calls `pty_real_select_result()` without capturing or using its return value

The HEAD version appears to be accumulating a success/failure status across multiple iterations (since this is in a `do-while` loop), while the other version ignores the return value.

Without more context about the broader function and whether `ret` is used elsewhere, or whether the return value of `pty_real_select_result()` is important for the overall logic, I cannot determine which approach is correct or if both sides have valid but incompatible intentions.

Here is the code snippet with the conflict preserved:

```c
      pid = waitpid(-1, &status, WNOHANG);

      pty = find234(ptys_by_pid, &pid, pty_find_by_pid);

      if (pty)
<<<<<<< HEAD
        ret = ret && pty_real_select_result(pty, -1, status);
=======
        pty_real_select_result(pty, -1, status);
>>>>>>> 4348393f562c8011ebca43d6198e98638aa115b5
    } while (pid > 0);
  } else {
    pty = find234(ptys_by_fd, &fd, pty_find_by_fd);

    if (pty)

```