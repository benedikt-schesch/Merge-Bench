<think>
No reasoning found</think>
Looking at this merge conflict, I need to understand the semantic intent of both sides:

1. **HEAD (current branch)**: Adds builtins to the completion list by including `builtin.Builtin.scope.get_set_vars()`
2. **Incoming branch**: Removes that addition (or never had it)

The function appears to be building a completion list (`compl`) by traversing scopes and collecting variables. The HEAD branch wants to ensure that built-in variables are included in the global scope completions, which makes semantic sense for a completion system - users would expect to see built-ins like `print`, `len`, etc. in their completions.

The incoming branch either never had this feature or removed it, but given the context of building completions, including builtins seems like the correct semantic intent.

Here's the resolved code:

```python
    while scope:
        # class variables/functions are only availabe
        if not isinstance(scope, parsing.Class) or scope == start_scope:
            compl += scope.get_set_vars()
        scope = scope.parent

    # add builtins to the global scope
    compl += builtin.Builtin.scope.get_set_vars()
    return compl


def get_scopes_for_name(scope, name, search_global=False):
    """

```