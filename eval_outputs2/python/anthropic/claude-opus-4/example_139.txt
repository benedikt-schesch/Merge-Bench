<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to modify the same phone number configuration. Let me analyze the differences:

**HEAD (left side):**
- Uses regular strings for format patterns (no `u` prefix)
- Ends with `main_country_for_code=True)`

**Right side (5c84a7c6...):**
- Uses Unicode strings for format patterns (`u'...'` prefix)
- Ends with `main_country_for_code=True,` followed by `mobile_number_portable_region=True)`

The semantic intent appears to be:
1. Both sides want the same number formatting patterns
2. The right side adds a new configuration option `mobile_number_portable_region=True`
3. The difference in string prefixes (`u` vs no prefix) is likely due to Python 2/3 compatibility considerations

Since the only meaningful semantic difference is the addition of `mobile_number_portable_region=True`, I'll resolve by keeping the formatting patterns (without the `u` prefix as it's unnecessary in Python 3) and including the new configuration option:

```python
    uan=PhoneNumberDesc(national_number_pattern='NA', possible_number_pattern='NA'),
    voicemail=PhoneNumberDesc(national_number_pattern='NA', possible_number_pattern='NA'),
    no_international_dialling=PhoneNumberDesc(national_number_pattern='NA', possible_number_pattern='NA'),
    national_prefix='1',
    national_prefix_for_parsing='1',
    number_format=[NumberFormat(pattern='(\\d{3})(\\d{4})', format='\\1-\\2', national_prefix_optional_when_formatting=True),
        NumberFormat(pattern='(\\d{3})(\\d{3})(\\d{4})', format='(\\1) \\2-\\3', national_prefix_optional_when_formatting=True)],
    intl_number_format=[NumberFormat(pattern='(\\d{3})(\\d{3})(\\d{4})', format='\\1-\\2-\\3')],
    main_country_for_code=True,
    mobile_number_portable_region=True)
```