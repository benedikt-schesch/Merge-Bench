<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to modify the `csv` function, but with different approaches:

- **HEAD (current branch)**: Has a simple function signature that just takes `querier` as a parameter (along with `header` and `sep`), assuming the querier object is already created and populated elsewhere.

- **The incoming branch**: Has a more comprehensive function signature that takes query parameters (`query`, `author`, `count`, `bycluster`) and creates the `ScholarQuerier` object internally, then performs the query.

The semantic intent appears to be that the incoming branch is trying to make the `csv` function more self-contained by handling the querier creation and query execution internally, while HEAD keeps these responsibilities separate.

Given that the incoming change seems to be a deliberate refactoring to encapsulate the querying logic within the function, and both versions ultimately do the same thing with the articles (print them as CSV), I'll resolve in favor of the incoming changes:

```python
    articles = querier.articles
    for art in articles:
        print(art.as_txt() + '\n')

def csv(query, author, count, bycluster=False, header=False, sep='|'):
    querier = ScholarQuerier(author=author, count=count, bycluster=bycluster)
    if bycluster:
        querier.querybycluster(query)
    else:
        querier.query(query)
    articles = querier.articles
    for art in articles:
        result = art.as_csv(header=header, sep=sep)
        print(encode(result))
        header = False

```