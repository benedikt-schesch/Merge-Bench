<think>
No reasoning found</think>
Looking at this merge conflict, I need to understand the semantic intent of both sides:

- HEAD has version `2.9.0.dev` - indicating development towards a 2.9.0 release
- The incoming change has version `2.8.22.dev` - indicating development towards a 2.8.22 patch release

Based on semantic versioning principles:
- 2.9.0 represents a minor version bump (new features, backwards compatible)
- 2.8.22 represents a patch version (bug fixes only)

The conflict likely arose because:
1. The main branch was preparing for the next minor release (2.9.0)
2. Meanwhile, a patch release branch was created for 2.8.x fixes

Since HEAD is already at 2.9.0.dev, it indicates the main development line has moved forward to the next minor version. The 2.8.22 would typically be on a separate maintenance branch. In the main branch, we should keep the higher version number.

```python

The version should always be set to the <next release version>.dev
The jenkins release job will automatically strip the .dev for release,
and update the version again for continued development.
"""
__version__ = '2.9.0.dev'

```