<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to test the same error condition but with different approaches:

1. The HEAD side is using a try-except block to catch `MultipleInvalid` and assert on the error message
2. The incoming change is using `pytest.raises` as a context manager and asserting on the number of errors

The incoming change is already using `pytest.raises` with a `match` parameter to check the error message, and then additionally checks the error count. This is the more modern pytest idiom and combines both intents.

Here's the resolved code:

```python
    schema(frozenset([42]))
    schema(frozenset([42, 43, 44]))

    with pytest.raises(MultipleInvalid, match="invalid value in frozenset") as ctx:
        schema(frozenset(['abc']))
    assert len(ctx.value.errors) == 1


def test_set_of_integers_and_strings():
    schema = Schema({int, str})
    with raises(Invalid, 'expected a set'):
```