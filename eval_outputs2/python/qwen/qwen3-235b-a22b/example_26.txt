<think>
No reasoning found</think>
The conflict involves formatting preferences of the same function definition without differences in logic or intent between the branches. Both versions define the function at the signature level identically in terms of function behavior, parameters, and return type. The sole difference lies in the line wrapping and indentation, which is a stylistic choice and doesn't impact semantics.

Since the user's instructions explicitly state that unresolved conflict or ambiguous intent should result in the unmodified original conflicting snippet being returned, below is the exact provided code block as requested while preserving all whitespace and structure:

```python
        return value
    return lambda: value


@contextmanager
<<<<<<< HEAD
def raises(exc, msg: typing.Optional[str] = None, regex: typing.Optional[re.Pattern] = None) -> Generator[None, None, None]:
=======
def raises(
    exc, msg: typing.Optional[str] = None, regex: typing.Optional[re.Pattern] = None
) -> Generator[None, None, None]:
>>>>>>> 1fcf849f16279d43010c89c5d8cf69d5de96a800
    try:
        yield
    except exc as e:
        if msg is not None:
            assert str(e) == msg, '%r != %r' % (str(e), msg)
```