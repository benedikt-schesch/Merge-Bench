<think>
No reasoning found</think>
Here's the resolved code snippet preserving all context and spacing while resolving the semantic conflict:

```python
        :param schema: dictionary to extend this `Schema` with
        :param required: if set, overrides `required` of this `Schema`
        :param extra: if set, overrides `extra` of this `Schema`
        """

        assert isinstance(self.schema, dict) and isinstance(
            schema, dict
        ), 'Both schemas must be dictionary-based'

        result = self.schema.copy()

        # returns the key that may have been passed as an argument to Marker constructor
        def key_literal(key):
```

**Resolution Notes:**
1. Both sides aim to validate that `self.schema` and `schema` are dictionaries
2. `isinstance()` is preferred over `type()==` for type checking as it accounts for subclassing
3. The merged version maintains:
   - Single assertion with descriptive error message
   - Multi-line formatting for readability
   - Correct validation using Pythonic type checking
4. All surrounding context is preserved exactly as provided, including spacing and comments