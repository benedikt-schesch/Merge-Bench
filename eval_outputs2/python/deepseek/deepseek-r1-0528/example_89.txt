<think>
No reasoning found</think>
I'll resolve this merge conflict by selecting the most appropriate version based on semantics and readability. Both versions are trying to convey the same meaning about the Worker class, but the other branch's version provides better flow by keeping "Worker class and" together.

Here's the resolved snippet:

```python


logger = logging.getLogger(__name__)

class Worker(object):
    """Defines a worker. The ``pyres_worker`` script instantiates this Worker class and
    passes a comma-separated list of queues to listen on.::

       >>> from pyres.worker import Worker
       >>> Worker.run([queue1, queue2], server="localhost:6379")

    """

```

Rationale:
1. Both versions describe the same functionality
2. The other branch's version reads more naturally by keeping "Worker class and" together
3. The example code remains unchanged as it was identical in both branches
4. All surrounding context and spacing is preserved exactly as provided
5. This resolution maintains the semantic intent while improving readability