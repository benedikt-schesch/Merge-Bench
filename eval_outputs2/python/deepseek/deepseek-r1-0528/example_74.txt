<think>
No reasoning found</think>
The merge conflict arises from differing type annotations for the `type` parameter in the constructor. Both versions share the same core functionality but the incoming commit expands the type flexibility to include callables. The resolution preserves this enhanced flexibility while maintaining the existing semantics.

```python
        >>> validate = Schema(Coerce(int, "moo"))
        >>> with raises(MultipleInvalid, 'moo'):
        ...   validate('foo')
    """

    def __init__(
        self,
        type: typing.Union[type, typing.Callable],
        msg: typing.Optional[str] = None,
    ) -> None:
        self.type = type
        self.msg = msg
        self.type_name = type.__name__

    def __call__(self, v):
```

Key resolution points:
1. Maintained the multi-line constructor format for readability
2. Union type `typing.Union[type, typing.Callable]` accepts:
   - Class types (original requirement)
   - Callable functions (new flexibility)
3. Preserved existing attribute assignments
4. Kept `msg` parameter unchanged
5. Retained return type annotation `-> None`

The solution allows both class constructors (like `int`) and callable functions to be used for coercion, which maintains backwards compatibility while extending functionality. The `type_name` assignment remains safe as both classes and functions have `__name__` attributes in Python.