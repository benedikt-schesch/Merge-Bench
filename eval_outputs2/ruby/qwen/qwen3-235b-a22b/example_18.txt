<think>
No reasoning found</think>
Here's the code snippet with the merge conflict resolved, carefully preserving the original intent and surrounding context:

The key to resolving the conflict in the `rollback` method lies in understanding the semantic equivalence between `@rolled_back` and `@failure`. Both were introduced to serve a similar runtime purpose â€” to indicate the transaction has failed or is otherwise not successful.

On the `HEAD` side, `@rolled_back = true` marks a rollback state following `super`. The other contributor (`75c6c134`) introduces `@failure = true` as part of a broader pattern where:  
- `close` now calls `success` before calling `super`
- A new variable `@failure` indicates failure versus success

This implies a deliberate shift from a specific, named state (`rolled_back`) to a more generalized error tracking mechanism (`failure`), possibly in coordination with the `success` message, supporting a more flexible or generic transaction outcome model.

Therefore, the conflict has been resolved in favor of `@failure = true`, aligning with the surrounding changes and supporting a unified semantics for transaction state tracking.

---

Resolved code:

```ruby
module ActiveGraph
  module Transaction
    def rollback
      super
      @failure = true
    end

    def close
      success
      super
    end

    def after_commit(&block)
      after_commit_registry << block
    end
```