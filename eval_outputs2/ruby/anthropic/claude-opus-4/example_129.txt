<think>
No reasoning found</think>
Looking at this merge conflict, I need to understand what each side is trying to achieve:

**HEAD (current branch)**: Has a `filters.each do |key, value|` loop that iterates through filters, skipping special keys like `__order`, `__offset`, `__count`, and `__params`.

**Incoming branch**: Introduces a `type_convert` hash that maps type symbols to PostgreSQL type casting strings, but doesn't have the `filters.each` loop structure.

The semantic intent appears to be:
- HEAD wants to process filters in a loop
- The incoming branch wants to add type conversion functionality

Since the `type_convert` hash seems to be a utility that would be used within the filter processing logic (though we can't see where it's used in the incoming branch), and the HEAD has the proper loop structure, I'll merge them by placing the `type_convert` definition inside the loop where it can be used:

```ruby
      end

      params = filters.has_key?(:__params) ? [*filters.delete(:__params)] : []
      filters[:__order] ||= [:created_at, :DESC]

      filters.each do |key, value|
        type_convert = {
          boolean: '::boolean',
          integer: '::integer',
          float: '::float',
          string: '::varchar'
        }[type]

        next if [:__order, :__offset, :__count, :__params].include?(key)

        found_index = key.to_s.rindex('__')
        key_root = found_index.nil? ? key : key.to_s[0...found_index].to_sym

```