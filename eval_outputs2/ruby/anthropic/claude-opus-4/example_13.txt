<think>
No reasoning found</think>
Looking at this merge conflict, I need to understand what each side is trying to achieve:

- HEAD (current branch): Has removed or doesn't include `Sidekiq::Extensions.enable_delay!`
- Incoming branch: Wants to add `Sidekiq::Extensions.enable_delay!`

Both sides agree on the code that follows (the `require` statement and `Sidekiq::CurrentAttributes.persist` line).

The semantic intent appears to be:
- The incoming branch wants to enable Sidekiq's delay extensions
- The current branch either intentionally removed this or never had it

Since `Sidekiq::Extensions.enable_delay!` is typically used to enable ActiveRecord delay extensions in Sidekiq, and there's no clear indication that this conflicts with the CurrentAttributes configuration below, the safest resolution is to include it to preserve the incoming branch's intent.

```ruby
    now = Time.now.to_f
    puts "Latency: #{now - start} sec"
  end
end

Sidekiq::Extensions.enable_delay!

require "sidekiq/middleware/current_attributes"
Sidekiq::CurrentAttributes.persist("Myapp::Current") # Your AS::CurrentAttributes singleton

# Sidekiq.transactional_push!


```