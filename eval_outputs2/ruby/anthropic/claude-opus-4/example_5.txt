<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to define the same `EventNameLocked` exception class, but with different parent classes:

- HEAD version: `EventNameLocked < StandardError`
- Other version: `EventNameLocked < Error`

Given the context, all other custom exceptions in this file inherit from `Error` (not `StandardError`). This suggests there's a custom `Error` class defined elsewhere that serves as the base for all application-specific exceptions. The semantic intent appears to be maintaining consistency with the error hierarchy pattern used throughout the codebase.

The resolution should use `Error` as the parent class to maintain consistency:

```ruby
    class MissingOrInvalidImageFile < Error; end
    class TooManyUnapprovedPhotosPending < Error; end
    class ExtendedPermissionRequired < Error; end
    class ReadMailboxExtendedPermissionRequired < Error; end
    class InvalidFriendList < Error; end
    class EventNameLocked < Error ; end
    class UserUnRegistrationFailed < Error
      attr_accessor :failed_users
    end
    class UserRegistrationFailed < Error
      attr_accessor :failed_users

```