<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to define the `@options_key` hash with the same mappings, just in a different order. Additionally, the incoming change (after `=======`) adds a new line `@params = params`.

The semantic intent appears to be:
1. Both sides want the same key-value mappings in the hash (just ordered differently)
2. The incoming change wants to add `@params = params` initialization

Here's the resolved code:

```ruby
        @uri = Addressable::URI.parse(path.start_with?('http') ? path : BASE_URL + path)
        multipart_options = params ? params : options
        set_multipart_options!(request_method, multipart_options)
        @path = uri.path
        @options = options
        @options_key = {get: :params, json_post: :json, json_put: :json, delete: :params}[request_method] || :form
        @params = params
      end

      # @return [Array, Hash]
      def perform
        response = http_client.headers(@headers).public_send(@request_method, @uri.to_s, request_options)

```