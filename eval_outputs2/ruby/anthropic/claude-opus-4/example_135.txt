<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to address the same issue - checking the class of `item[:item_id]`. The conflict arises because:

- HEAD (left side) has the original simple check: `item[:item_id].class.should eq Fixnum`
- The incoming change (right side) adds compatibility for Ruby 2.4+ where `Fixnum` and `Bignum` were unified into `Integer`

The intent of the incoming change is clear: it's adding backwards compatibility so the test works on both older Ruby versions (where `Fixnum` exists) and newer Ruby versions (where only `Integer` exists).

Since the incoming change is more comprehensive and handles both cases while HEAD only handles the old case, the semantic resolution is to accept the incoming change entirely.

```ruby
    data.flatten.size.should eq 8
    data.each do |item|
      # all keys should be symbols when using v1.x backwards compatible mode
      item.keys.each{|x| x.class.should eq Symbol}
      item[:timestamp].should eq 1381388409
      # Ruby 2.4+ unifies Fixnum & Bignum into Integer.
      if 0.class == Integer
        item[:item_id].class.should eq Integer
      else
        item[:item_id].class.should eq Fixnum
      end
      item[:name].size.should be > 0
    end
    data[3][:parent_id].should be_nil
    data[4][:parent_id].should be_nil
  end

```