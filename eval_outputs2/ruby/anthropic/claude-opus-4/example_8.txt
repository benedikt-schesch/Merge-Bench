<think>
No reasoning found</think>
Looking at this merge conflict, I need to understand what both sides are trying to achieve:

- **HEAD**: Uses `sscan("processes").to_a.sort` - scans the set and sorts the results
- **Incoming change**: Uses `sscan_each("processes").to_a` - uses an enumerator-based scanning approach

The semantic intent appears to be:
- HEAD wants the processes sorted (adding `.sort`)
- The incoming change wants to use `sscan_each` instead of `sscan` (likely for better memory efficiency with large sets)

Both changes seem valuable and compatible - we can use the more efficient `sscan_each` method while still sorting the results.

```ruby
      # dont run cleanup more than once per minute
      return 0 unless Sidekiq.redis { |conn| conn.set("process_cleanup", "1", nx: true, ex: 60) }

      count = 0
      Sidekiq.redis do |conn|
        procs = conn.sscan_each("processes").to_a.sort
        heartbeats = conn.pipelined { |pipeline|
          procs.each do |key|
            pipeline.hget(key, "info")
          end
        }

```