<think>
No reasoning found</think>
Looking at this merge conflict, I need to understand what each side is trying to achieve:

**HEAD (left side)**: Adds a method `add_taken_error(key)` that adds a validation error with `:taken` message to a given field.

**Right side**: Adds a method `invitation_taken?` that checks if an invitation has been taken (i.e., the user is no longer in the "invited to sign up" state).

These two methods serve different but related purposes:
- `add_taken_error` is about adding validation errors
- `invitation_taken?` is about checking the invitation status

Both methods appear to be semantically related to handling invitation states, but they don't conflict with each other functionally. They can coexist as they serve complementary purposes - one for validation error handling and one for status checking.

Here's the resolved code:

```ruby

        time = self.invitation_created_at || self.invitation_sent_at
        time + self.class.invite_for
      end

      def add_taken_error(key)
        errors.add(key, :taken)
      end

      def invitation_taken?
        !invited_to_sign_up?
      end

      protected

        def block_from_invitation?

```