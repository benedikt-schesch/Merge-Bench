<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to calculate the time remaining until a deadline. The semantic intent is the same - both want to determine how much time is left to wait.

The conflict is between:
- HEAD: `deadline - current_time`
- The incoming change: `deadline - ::Process.clock_gettime(Process::CLOCK_MONOTONIC)`

The incoming change is more specific and explicit about using a monotonic clock for time measurement, which is generally better for calculating time intervals as it's not affected by system clock adjustments. The HEAD version uses `current_time` which is likely a method call that abstracts the time source.

Without seeing the broader context of how `current_time` is defined or whether there's a deliberate abstraction pattern being followed, I cannot definitively resolve this conflict. The safer approach is to preserve the conflict for manual resolution.

```ruby
        return fetch_connection(options) if connection_stored?(options)

        connection = try_create(options)
        return connection if connection

<<<<<<< HEAD
        to_wait = deadline - current_time
=======
        to_wait = deadline - ::Process.clock_gettime(Process::CLOCK_MONOTONIC)
>>>>>>> 3e7513c1df257fe5124dfadc825a444110eb349b
        raise Timeout::Error, "Waited #{timeout} sec" if to_wait <= 0
        @resource.wait(@mutex, to_wait)
      end
    end
  end

```