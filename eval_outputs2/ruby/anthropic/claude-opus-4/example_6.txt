<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to set a `deadline` variable by adding `timeout` to some form of current time. The semantic intent is the same - to calculate a deadline timestamp.

The key difference is:
- HEAD uses `current_time` (likely a method call)
- The incoming change uses `::Process.clock_gettime(Process::CLOCK_MONOTONIC)` (a direct system call for monotonic time)

The incoming change appears to be moving towards using a more explicit, monotonic clock source which is generally preferred for timeout calculations as it's not affected by system time changes.

Since both sides have the same intent (calculating a deadline) and the incoming change uses a more robust approach, I'll resolve in favor of the incoming change:

```ruby

  def pop(timeout = 0.5, options = {})
    options, timeout = timeout, 0.5 if Hash === timeout
    timeout = options.fetch :timeout, timeout

    deadline = ::Process.clock_gettime(Process::CLOCK_MONOTONIC) + timeout
    @mutex.synchronize do
      loop do
        raise ConnectionPool::PoolShuttingDownError if @shutdown_block
        return fetch_connection(options) if connection_stored?(options)


```