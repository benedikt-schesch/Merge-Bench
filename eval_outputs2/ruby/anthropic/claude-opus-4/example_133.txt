<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to modify the `invoke_then_revoke!` method. The key difference is:

- HEAD version: Does not pass the block parameter to `invoke!`
- Incoming version: Adds `&block` parameter and passes it to `invoke!`

The semantic intent of the incoming change appears to be allowing `invoke_then_revoke!` to accept and forward a block to the `invoke!` method. Since blocks are commonly used in Ruby for callbacks or additional configuration, this seems like a legitimate enhancement.

The `revoke!` call remains the same in both versions (not receiving the block), which makes sense as revocation typically doesn't need the same block-based customization that invocation might need.

Here's the resolved version:

```ruby

  def revoke!(klass, *args, **kwargs)
    call_generator!(new_revoke_generator(klass, *args, **kwargs))
  end

  def invoke_then_revoke!(klass, *args, **kwargs, &block)
    invoke! klass, *args, **kwargs, &block
    revoke! klass, *args, **kwargs
  end

  def call_generator!(generator)
    generator.invoke_all

```