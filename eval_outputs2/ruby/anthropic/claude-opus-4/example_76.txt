<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to achieve similar functionality but with different approaches to variable scope:

- **HEAD**: Uses an instance variable `@node_manager` and calls `trap_signals` without passing the node manager as an argument
- **Other branch**: Uses a local variable `node_manager` and passes it as an argument to `trap_signals`

The key insight is that the `trap_signals` method signature (shown below the conflict) expects a `node_manager` parameter. This indicates that the other branch's approach is semantically correct - the method needs access to the node manager instance.

Here's the resolved code:

```ruby
    # @param [Array] options the command-line options
    # @note this method blocks and does not return until the
    #   Node Manager is gracefully stopped
    def self.run(options)
      options = CLI.parse(options)
      node_manager = NodeManager.new(options)
      trap_signals(node_manager)
      node_manager.start
    end

    # Traps shutdown signals.
    # @param [NodeManager] node_manager the node manager
    def self.trap_signals(node_manager)

```