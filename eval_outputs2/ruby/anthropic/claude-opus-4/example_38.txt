<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to define the same method `manhattan_distance`, but with different approaches:

- **HEAD**: Defines it as an instance method
- **Incoming branch**: Defines it as a class method (with `self.`) and includes YARD documentation

Based on the semantic intent, both versions implement the same Manhattan distance calculation. The key difference is whether this should be an instance method or a class method. Without more context about the class structure and how this method is used elsewhere, I cannot definitively determine which approach is correct.

Since the conflict represents a fundamental design decision about method scope (instance vs class method) that could affect how the method is called throughout the codebase, I'm returning the snippet with the conflict unresolved:

```ruby
      end
      
      
      # city block, Manhattan distance, or L1 norm.
      # Parameters a and b are vectors with continuous attributes.
<<<<<<< HEAD
      def manhattan_distance(a, b)
=======
      # @param a [Object]
      # @param b [Object]
      # @return [Object]
      def self.manhattan_distance(a, b)
>>>>>>> 753f2ec0c999c414bbd1f295a5719f7687c78f13
        sum = 0.0
        a.each_with_index do |item_a, i|
          item_b = b[i]
          sum += (item_a - item_b).abs
        end
```