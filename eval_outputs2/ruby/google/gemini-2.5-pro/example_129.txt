<think>
No reasoning found</think>
An expert in semantic merge conflict resolution would determine that the `HEAD` branch is setting up an iteration over the `filters` hash, which is necessary for the subsequent lines of code that use the `key` variable. The other branch introduces logic for type conversion that seems out of place, as it doesn't integrate with the surrounding code and would cause an error because the `key` variable used later would be undefined.

The most logical resolution is to accept the change from `HEAD` to correctly set up the iteration.

```ruby
      end

      params = filters.has_key?(:__params) ? [*filters.delete(:__params)] : []
      filters[:__order] ||= [:created_at, :DESC]

      filters.each do |key, value|

        next if [:__order, :__offset, :__count, :__params].include?(key)

        found_index = key.to_s.rindex('__')
        key_root = found_index.nil? ? key : key.to_s[0...found_index].to_sym

```