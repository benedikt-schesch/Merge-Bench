<think>
No reasoning found</think>
This merge conflict involves two different ways of calculating the remaining time before a timeout.

-   The `HEAD` branch uses a `current_time` variable, which was likely defined at the beginning of a loop.
-   The incoming branch (`3e7513c1df257fe5124dfadc825a444110eb349b`) calculates the current time at the point of use with `::Process.clock_gettime(Process::CLOCK_MONOTONIC)`.

The intent of both is to calculate the time left before raising a timeout. However, the incoming branch's approach is more accurate and robust. It accounts for the time spent in the preceding `try_create(options)` call on each iteration, whereas the `HEAD` version would use a stale `current_time` value. Furthermore, using a monotonic clock is best practice for measuring elapsed time, as it is not affected by system clock adjustments.

Therefore, the correct resolution is to use the more precise and robust implementation from the incoming branch.

```ruby
        return fetch_connection(options) if connection_stored?(options)

        connection = try_create(options)
        return connection if connection

        to_wait = deadline - ::Process.clock_gettime(Process::CLOCK_MONOTONIC)
        raise Timeout::Error, "Waited #{timeout} sec" if to_wait <= 0
        @resource.wait(@mutex, to_wait)
      end
    end
  end

```