<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to call the same `RunTestSet` method but with different parameter sources:

- **HEAD**: Uses fields from `initialisedValues` object
- **Incoming branch**: Uses fields from `options` object and local variables

The semantic intent appears to be the same - both are trying to pass the necessary parameters to `RunTestSet`. The conflict seems to be about which source to use for these parameters.

Since I cannot determine the broader context of whether the codebase should use `initialisedValues` or `options` pattern without more information about the architectural decisions, I'll return the conflict as is:

```go
		// checking whether the provided testset match with a recorded testset.
		if _, ok := initialisedValues.SessionsMap[sessionIndex]; !ok {
			t.logger.Info("no testset found with: ", zap.Any("name", sessionIndex))
			continue
		}
<<<<<<< HEAD
		testRunStatus := t.RunTestSet(sessionIndex, path, testReportPath, appCmd, appContainer, appNetwork, Delay, 0, initialisedValues.YamlStore, initialisedValues.LoadedHooks, initialisedValues.TestReportFS, nil, apiTimeout, initialisedValues.Ctx, noiseConfig, false)
=======
		testRunStatus := t.RunTestSet(sessionIndex, path, testReportPath, appCmd, options.AppContainer, options.AppNetwork, options.Delay, 0, ys, loadedHooks, testReportFS, nil, options.ApiTimeout, ctx, options.NoiseConfig, false)
>>>>>>> e4e1eb9b70ad7642e1296bc79aeecc4953e607c9
		switch testRunStatus {
		case models.TestRunStatusAppHalted:
			testRes = false
			exitLoop = true
		case models.TestRunStatusFaultUserApp:
```