<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to call `proxy.BootProxy` but with different approaches:

- **HEAD**: Uses `cfg` object for configuration values and assigns to `returnVal.ProxySet`
- **Other branch**: Uses `options` object for configuration values, adds `MongoPassword` parameter, and assigns to `ps`

The semantic intent appears to be:
1. Both want to boot the proxy with configuration parameters
2. The other branch introduces MongoDB password support
3. Both use the same loaded hooks and context

Here's the resolved conflict that preserves both intents:

```go
	case <-stopper:
		returnVal.LoadedHooks.Stop(true)
		return returnVal, errors.New("Keploy was interupted by stopper")
	default:
		// start the proxy
		returnVal.ProxySet = proxy.BootProxy(t.logger, proxy.Option{MongoPassword: cfg.MongoPassword, Port: cfg.Proxyport}, cfg.AppCmd, cfg.AppContainer, 0, "", cfg.PassThorughPorts, returnVal.LoadedHooks, context.Background())
	}

	// proxy update its state in the ProxyPorts map
	//Sending Proxy Ip & Port to the ebpf program
	if err := returnVal.LoadedHooks.SendProxyInfo(returnVal.ProxySet.IP4, returnVal.ProxySet.Port, returnVal.ProxySet.IP6); err != nil {

```