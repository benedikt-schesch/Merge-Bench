<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to build a `MockSpec` struct. The HEAD version has the basic fields, while the incoming change is adding two timestamp-related fields (`ReqTimestampMock` and `ResTimestampMock`).

The semantic intent appears to be:
- HEAD: Has the core mock specification fields
- Incoming: Adds timestamp mock fields to the specification

Since both changes are additive and non-conflicting (the incoming change is just adding new fields), the resolution should include both sets of fields.

Here's the resolved code:

```go
			mock.Spec = models.MockSpec{
				Metadata: PostSpec.Metadata,
				// OutputBinary: genericSpec.Objects,
				PostgresRequests:  PostSpec.PostgresRequests,
				PostgresResponses: PostSpec.PostgresResponses,
				ReqTimestampMock:  PostSpec.ReqTimestampMock,
				ResTimestampMock:  PostSpec.ResTimestampMock,
			}
		case models.SQL:
			mysqlSpec := spec.MySQLSpec{}
			err := m.Spec.Decode(&mysqlSpec)
			if err != nil {

```