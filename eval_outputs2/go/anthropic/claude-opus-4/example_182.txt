<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are modifying the function signature of `encodeOpMsg`. The HEAD version has a simpler signature with just `responseOpMsg` and `logger` parameters, while the incoming change adds two additional parameters: `actualRequestMsgSections []string` and `expectedRequestMsgSections []string`.

Without more context about the intent of both changes, I cannot determine which version should be kept or if both sets of parameters are needed. The conflict appears to be a fundamental disagreement about what parameters this function requires.

Here is the snippet with the conflict preserved:

```go
	// expectedIdentifier = submatches[1]
	message = submatches[1]
	return message, nil
}

<<<<<<< HEAD
func encodeOpMsg(responseOpMsg *models.MongoOpMessage, logger *zap.Logger) (*opMsg, error) {
=======
func encodeOpMsg(responseOpMsg *models.MongoOpMessage, actualRequestMsgSections []string, expectedRequestMsgSections []string, logger *zap.Logger) (*opMsg, error) {
>>>>>>> e4e1eb9b70ad7642e1296bc79aeecc4953e607c9
	message := &opMsg{
		flags:    wiremessage.MsgFlag(responseOpMsg.FlagBits),
		checksum: uint32(responseOpMsg.Checksum),
		sections: []opMsgSection{},
	}
```