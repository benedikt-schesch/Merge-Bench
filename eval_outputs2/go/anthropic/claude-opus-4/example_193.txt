<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are calling `stern.Watch` but with different parameters. The key difference is in the container state parameter:

- HEAD version: `[]stern.ContainerState{stern.RUNNING, stern.TERMINATED}`
- Other version: `stern.RUNNING`

The HEAD version is passing an array of container states (RUNNING and TERMINATED), while the other version is passing a single state (RUNNING). 

Based on the semantic intent, the HEAD version seems more comprehensive as it watches containers in both RUNNING and TERMINATED states, which would provide more complete log coverage. The other version would only watch running containers.

Here's the resolved conflict, keeping the more comprehensive HEAD version:

```go
	if err != nil {
		return fmt.Errorf("fail to compile '%s' for logs query", selectedRes.Name+".*")
	}
	container := regexp.MustCompile(".*")
	namespace := selectedRes.Namespace
	added, removed, err := stern.Watch(ctx, clientSet.CoreV1().Pods(namespace), pod, container, nil, []stern.ContainerState{stern.RUNNING, stern.TERMINATED}, labelSelector)
	if err != nil {
		return err
	}
	tails := make(map[string]*stern.Tail)
	logC := make(chan string, 1024)
```