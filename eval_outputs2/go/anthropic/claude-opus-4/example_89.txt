<think>
No reasoning found</think>
Looking at this merge conflict, both sides are trying to achieve the same goal - setting the attempt number in the metadata. The key differences are:

1. **Package/import difference**: `metautils` vs `metadata`
2. **Formatting approach**: `strconv.FormatUint(uint64(attempt), 10)` vs `fmt.Sprintf("%d", attempt)`

Given that this appears to be a file that was moved/renamed (from `retry/retry.go` to `interceptors/retry/retry.go`), and considering that `metautils` is likely a utility package that wraps or extends the standard `metadata` package, I'll preserve the HEAD version which uses `metautils` and the more efficient `strconv.FormatUint` approach:

```go
	ctx := parentCtx
	if callOpts.perCallTimeout != 0 {
		ctx, cancel = context.WithTimeout(ctx, callOpts.perCallTimeout)
	}
	if attempt > 0 && callOpts.includeHeader {
		mdClone := metautils.ExtractOutgoing(ctx).Clone().Set(AttemptMetadataKey, strconv.FormatUint(uint64(attempt), 10))
		ctx = mdClone.ToOutgoing(ctx)
	}
	return ctx, cancel
}
```