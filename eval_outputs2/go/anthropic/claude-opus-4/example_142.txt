<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to achieve the same semantic intent - they're both defining the same function `nestedQueryParams` with identical logic. The only difference is the return type name:

- HEAD uses `swaggerParameterObject`
- The incoming change uses `openapiParameterObject`

This appears to be a renaming refactor where the project is transitioning from "swagger" terminology to "openapi" terminology (which makes sense as OpenAPI is the newer standard that evolved from Swagger). The file paths also support this interpretation:
- HEAD: `protoc-gen-swagger/genswagger/template.go`
- Incoming: `protoc-gen-openapiv2/internal/genopenapi/template.go`

Since the incoming change represents the newer terminology and file structure, I'll resolve in favor of the incoming change:

```go
// This function is a helper function for queryParams, that keeps track of cyclical message references
//  through the use of
//      touched map[string]bool
// If a cycle is discovered, an error is returned, as cyclical data structures aren't allowed
//  in query parameters.
func nestedQueryParams(message *descriptor.Message, field *descriptor.Field, prefix string, reg *descriptor.Registry, pathParams []descriptor.Parameter, body *descriptor.Body, touchedIn map[string]bool) (params []openapiParameterObject, err error) {
	// make sure the parameter is not already listed as a path parameter
	for _, pathParam := range pathParams {
		if pathParam.Target == field {
			return nil, nil
		}

```