<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to implement a `Set` method for metadata, but with some differences:

1. **Type difference**: One side uses `NiceMD` while the other uses `MD`
2. **Key handling**: One side uses `strings.ToLower(key)` while the other uses `encodeKeyValue(key, value)`
3. **Value handling**: One side uses the value directly while the other encodes it

Based on the context and the comment about being "binary-key safe", it appears that the `encodeKeyValue` approach is attempting to handle binary safety concerns, while the `strings.ToLower` approach is focusing on case-insensitive key handling.

Without more context about the broader codebase and which approach is preferred, I cannot determine the correct resolution. The two implementations have fundamentally different approaches to handling the key-value pairs.

Here is the snippet with the conflict preserved:

```go
// Set sets the given value in a metadata.
//
// It works analogously to http.Header.Set, overwriting all previous metadata values.
//
// The function is binary-key safe.
<<<<<<< HEAD:util/metautils/nicemd.go
func (m NiceMD) Set(key string, value string) NiceMD {
	k := strings.ToLower(key)
	m[k] = []string{value}
=======
func (m MD) Set(key string, value string) MD {
	k, v := encodeKeyValue(key, value)
	m[k] = []string{v}
>>>>>>> 5ca0c417820d989b27ce8f2ef107c8ca878f3561:metadata/metadata.go
	return m
}

// Add retrieves a single value from the metadata.
//
```