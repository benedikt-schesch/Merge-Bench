<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to achieve the same semantic intent - they're both calling a function to update operation data from comments. The only difference is the function name:

- HEAD uses: `updateSwaggerDataFromComments`
- The incoming change uses: `updateOpenAPIDataFromComments`

Based on the file paths shown in the conflict markers, it appears this is part of a refactoring from "swagger" to "openapi" terminology:
- HEAD: `protoc-gen-swagger/genswagger/template.go`
- Incoming: `protoc-gen-openapiv2/internal/genopenapi/template.go`

The semantic intent is clear - the incoming change is part of a broader refactoring to use OpenAPI terminology instead of Swagger. Therefore, the correct resolution is to use the incoming change with `updateOpenAPIDataFromComments`.

```go
						requestResponseRefs[param.Schema.Ref] = struct{}{}
					}
				}

				methComments := protoComments(reg, svc.File, nil, "Service", int32(svcIdx-svcBaseIdx), methProtoPath, int32(methIdx))
				if err := updateOpenAPIDataFromComments(reg, operationObject, meth, methComments, false); err != nil {
					panic(err)
				}

				opts, err := getMethodOpenAPIOption(reg, meth)
				if opts != nil {

```