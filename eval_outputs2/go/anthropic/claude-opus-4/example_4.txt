<think>
No reasoning found</think>
Looking at this merge conflict, I can see that:

1. The HEAD branch adds flag variable declarations and initializes `runningServerReg` as a `sync.RWMutex{}`
2. The other branch (56dacfd0) only initializes `runningServerReg` as a `sync.Mutex{}`

The semantic intent appears to be:
- HEAD wants to add flag handling functionality AND use a read-write mutex for `runningServerReg`
- The other branch just wants to ensure `runningServerReg` is initialized as a regular mutex

Since both sides are trying to initialize `runningServerReg`, and the HEAD branch has additional functionality (flags) plus a more flexible mutex type (RWMutex allows for concurrent reads), the resolution should keep the HEAD version which includes both the flag declarations and the RWMutex initialization.

```go

	hookableSignals []os.Signal
)

func init() {
	flag.BoolVar(&isChild, "continue", false, "listen on open fd (after forking)")
	flag.StringVar(&socketOrder, "socketorder", "", "previous initialization order - used when more than one listener was started")

	runningServerReg = sync.RWMutex{}
	runningServers = make(map[string]*endlessServer)
	runningServersOrder = []string{}
	socketPtrOffsetMap = make(map[string]uint)

	DefaultMaxHeaderBytes = 0 // use http.DefaultMaxHeaderBytes - which currently is 1 << 20 (1MB)

```