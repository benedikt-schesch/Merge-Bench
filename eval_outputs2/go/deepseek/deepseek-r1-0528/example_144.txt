<think>
No reasoning found</think>
The merge conflict arises from two different approaches to updating a Swagger object with JSON schema information. Both sides aim to conditionally update the object if JSON schema options exist for the field, but they use different methods:

1. **HEAD version**:
   - Uses `extractJSONSchemaFromFieldDescriptor` with `f.FieldDescriptorProto`
   - Updates with `updateSwaggerObjectFromJSONSchema`

2. **Other branch version**:
   - Uses `getFieldOpenAPIOption` with `reg` and `f`
   - Updates with `updateswaggerObjectFromJSONSchema`

The key semantic differences are:
- The data-fetching methods have different signatures and likely different implementations
- The update methods have different naming conventions (camelCase vs lowercase)
- The arguments passed are structurally different

Since these appear to be fundamentally different implementations rather than compatible changes, and without deeper context about the project's evolution, I cannot safely resolve this conflict. The intent is ambiguous as both sides seem to achieve similar goals through different architectural approaches.

Here's the preserved snippet with the conflict:

```go
			schemaCore: core,
			Properties: props,
		}
	}

<<<<<<< HEAD:protoc-gen-swagger/genswagger/template.go
	if j, err := extractJSONSchemaFromFieldDescriptor(f.FieldDescriptorProto); err == nil {
		updateSwaggerObjectFromJSONSchema(&ret, j, reg, f)
=======
	if j, err := getFieldOpenAPIOption(reg, f); err == nil {
		updateswaggerObjectFromJSONSchema(&ret, j, reg, f)
>>>>>>> 0e11f6f8faadec71484fea2af292dcb6c56230d6:protoc-gen-openapiv2/internal/genopenapi/template.go
	}

	return ret
}

```