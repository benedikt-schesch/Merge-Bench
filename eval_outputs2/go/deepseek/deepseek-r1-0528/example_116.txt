<think>
No reasoning found</think>
```go
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "doubleVal")
	}

	protoReq.DoubleVal, err = runtime.DoubleValue(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "doubleVal", err)
	}

	if err := req.ParseForm(); err != nil {
```

**Resolution Reasoning:**
Both branches share identical error handling logic for the `runtime.DoubleValue()` call. The only difference is an extra newline in the HEAD version. Since:
1. The error handling is functionally identical
2. The newline doesn't affect semantics
3. The version without extra newline is more consistent with surrounding code style

I've kept the error check immediately after the assignment without the extra newline. The resolution preserves the intent of both branches while maintaining code consistency.