<think>
No reasoning found</think>
I'll help you resolve this merge conflict while preserving the context exactly as provided. Here's the analysis:

The conflict is about the parameter type for `md` in `defaultAPIOptions`:
1. HEAD uses `*descriptor.MethodDescriptorProto`
2. Other branch uses `*descriptorpb.MethodDescriptorProto`

After examining the context:
- The function body doesn't use `md` in the visible portion
- The comment references gRPC mapping specifications
- The file paths suggest structural changes (protoc-gen-grpc-gateway vs internal)
- The parameter name (`md`) and usage pattern are identical
- Both versions return `(*options.HttpRule, error)`

Since there's no semantic difference in the visible context and the conflict appears to be about package organization rather than functionality, I'll resolve it by choosing the more explicit package name (`descriptorpb`) which follows Protobuf naming conventions:

```go
		return nil, fmt.Errorf("extension is %T; want an HttpRule", ext)
	}
	return opts, nil
}

func defaultAPIOptions(svc *Service, md *descriptorpb.MethodDescriptorProto) (*options.HttpRule, error) {
	// FQSN prefixes the service's full name with a '.', e.g.: '.example.ExampleService'
	fqsn := strings.TrimPrefix(svc.FQSN(), ".")

	// This generates an HttpRule that matches the gRPC mapping to HTTP/2 described in
	// https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests
```

This resolution:
1. Maintains compatibility with both branches
2. Uses explicit package naming (`descriptorpb`)
3. Preserves all comments and implementation details
4. Keeps the spacing and context identical to the original