<think>
No reasoning found</think>
The conflict involves the `stern.Watch` function call, where the two branches have different parameters for container states. The HEAD version uses a slice with two states (`stern.RUNNING` and `stern.TERMINATED`), while the other branch uses a single state (`stern.RUNNING`). Since the function expects a slice of container states and the intent of both branches is ambiguous (one might want to include terminated containers while the other might not), the conflict cannot be automatically resolved without more context. Here's the unchanged snippet with the conflict:

```go
	if err != nil {
		return fmt.Errorf("fail to compile '%s' for logs query", selectedRes.Name+".*")
	}
	container := regexp.MustCompile(".*")
	namespace := selectedRes.Namespace
<<<<<<< HEAD
	added, removed, err := stern.Watch(ctx, clientSet.CoreV1().Pods(namespace), pod, container, nil, []stern.ContainerState{stern.RUNNING, stern.TERMINATED}, labelSelector)
=======
	added, removed, err := stern.Watch(ctx, clientSet.CoreV1().Pods(namespace), pod, container, nil, stern.RUNNING, labelSelector)
>>>>>>> 47a565d00d0bde2f49b1a615defd1089a2bae9c2
	if err != nil {
		return err
	}
	tails := make(map[string]*stern.Tail)
	logC := make(chan string, 1024)
```