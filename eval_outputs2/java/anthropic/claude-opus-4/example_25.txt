<think>
No reasoning found</think>
Looking at this merge conflict, I can see that:

1. The HEAD branch is adding imports for `WorldLoadEvent` and `WorldUnloadEvent` from the `org.spout.api.event.world` package
2. The incoming branch (5463b8f87d835f29ccb1c4feedad7ffad49380f6) is adding an import for `ConfigurationException` from the `org.spout.api.exception` package

These imports are not conflicting in terms of functionality - they're just different imports that both sides want to add. The semantic intent is clear: both sides want to add their respective imports to handle different aspects of the application (world events vs configuration exceptions).

Here's the resolved code:

```java
import org.spout.api.command.CommandSource;
import org.spout.api.command.annotated.AnnotatedCommandExecutorFactory;
import org.spout.api.event.EventManager;
import org.spout.api.event.SimpleEventManager;
import org.spout.api.event.server.permissions.PermissionGetAllWithNodeEvent;
import org.spout.api.event.world.WorldLoadEvent;
import org.spout.api.event.world.WorldUnloadEvent;
import org.spout.api.exception.ConfigurationException;
import org.spout.api.exception.SpoutRuntimeException;
import org.spout.api.geo.World;
import org.spout.api.geo.cuboid.Region;
import org.spout.api.geo.discrete.Point;
import org.spout.api.inventory.recipe.RecipeManager;

```