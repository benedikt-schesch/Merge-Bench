<think>
No reasoning found</think>
Looking at this merge conflict, both sides are trying to initialize the same HashMap, but with slightly different syntax:

- HEAD uses the older Java syntax with explicit type parameters: `new HashMap<GameInfo, Object>()`
- The other branch uses the diamond operator syntax introduced in Java 7: `new HashMap<>()`

Both achieve the same result - creating a HashMap with GameInfo keys and Object values. The diamond operator version is more concise and is the modern Java idiom since the compiler can infer the type parameters from the declaration.

Since both have the same semantic intent and the diamond operator is the more modern approach, I'll resolve by using the diamond operator version:

```java
   *                        sent to people in the game.
   * @return This game's general information: ID, host, state, player list, etc.
   */
  @Nullable
  public Map<GameInfo, Object> getInfo(final boolean includePassword) {
    final Map<GameInfo, Object> info = new HashMap<>();
    info.put(GameInfo.ID, id);
    // This is probably happening because the game ceases to exist in the middle of getting the
    // game list. Just return nothing.
    if (null == host) {
      return null;

```