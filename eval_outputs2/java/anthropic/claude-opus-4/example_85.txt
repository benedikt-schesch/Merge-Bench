<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to define the same class structure but with different naming conventions:

- HEAD uses `CustomDeck`, `CustomBlackCard`, and `CustomWhiteCard`
- The incoming branch uses `CardcastBlackCard` and `CardcastWhiteCard` (while the class is still named `CustomDeck`)

The conflict appears to be about which card types to use for the card collections. Since the class is named `CustomDeck` in both versions and the file path in HEAD shows it's for custom sets, while the incoming branch's path suggests it's specifically for Cardcast integration, this seems to be a refactoring where the custom card types are being replaced with Cardcast-specific types.

Given that the incoming branch appears to be specializing this class for Cardcast functionality (based on the file path), the semantic intent seems to be to use the Cardcast-specific card types.

```java
public class CustomDeck extends CardSet {
  private final int id;
  private final String name;
  private final String watermark;
  private final String description;
  private final Set<CardcastBlackCard> blackCards = new HashSet<>();
  private final Set<CardcastWhiteCard> whiteCards = new HashSet<>();

  public CustomDeck(final int id, final String name, final String watermark, final String description) {
    this.id = id;
    this.name = name;
    this.watermark = watermark;

```