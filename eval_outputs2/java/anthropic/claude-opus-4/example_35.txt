<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to implement the same method `getVersion()` with nearly identical logic. The only difference is the default version string returned when the version is null:

- HEAD (current branch) returns "1.4" as the default
- The incoming branch returns "1.2" as the default

Since HEAD has the higher version number (1.4), which typically indicates a more recent update, I'll resolve the conflict by keeping the HEAD version. This maintains the newer default version while preserving the intent of both sides to provide a fallback version when the implementation version cannot be retrieved.

```java
    @Override
    public String getVersion() {
        String version = null;
        try {
            version = ServerInfo.class.getPackage().getImplementationVersion();
        } catch (Exception e) {
        }
        return version != null ? version : "1.4";
    }

    @Override
    public String getStartupTime() {
        return startupTime;

```