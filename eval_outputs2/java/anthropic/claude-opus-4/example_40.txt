<think>
No reasoning found</think>
Looking at this merge conflict, I can see that both sides are trying to establish a logger instance for the Game class, but using different logging frameworks:

- HEAD is using `LogManager.getLogger(Game.class)` - likely from Log4j2
- The incoming change is using `Logger.getLogger(Game.class)` - likely from java.util.logging or another logging framework

Without more context about which logging framework the project has standardized on, I cannot determine which one is semantically correct. Both sides have the same intent (creating a logger for the Game class) but are using different implementations.

Here is the code snippet with the conflict preserved:

```java
   * be able to start.
   * <p>
   * We need 20 * maxPlayers cards. This allows black cards up to "draw 9" to work correctly.
   */
  public final static int MINIMUM_WHITE_CARDS_PER_PLAYER = 20;
<<<<<<< HEAD
  private static final Logger logger = LogManager.getLogger(Game.class);
=======
  private static final Logger logger = Logger.getLogger(Game.class);
>>>>>>> 5adedd24812861bedaf540555ec046744b42b42a
  /**
   * Time, in milliseconds, to delay before starting a new round.
   */
  private final static int ROUND_INTERMISSION = 8 * 1000;
  /**
```