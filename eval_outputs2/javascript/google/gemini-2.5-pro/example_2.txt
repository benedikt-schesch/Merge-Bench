<think>
No reasoning found</think>
This merge conflict presents two different ways of achieving the same goal: checking if the current specification is OpenAPI 3.

*   **HEAD:** This version uses a dedicated selector, `system.getSystem().specSelectors.isOAS3()`, to perform the check. This is a clean approach that uses the system's selector API, a high-level abstraction that hides the implementation details.
*   **Incoming Change (`48426836b...`):** This version first retrieves the entire specification object with `specJson()` and then passes it to a helper function, `isOAS3Helper(spec)`.

The semantic intent of both branches is identical. The difference lies in the implementation strategy. Using a dedicated selector like `isOAS3()` is generally better practice within a selector-based architecture (common in tools like Swagger UI). It encapsulates the logic for the check, making the code cleaner and more maintainable. If the logic for detecting OAS3 ever changes, only the `isOAS3` selector would need to be updated, rather than every location that performs this check.

The incoming change appears to be inlining the implementation of the selector, which breaks this encapsulation. Therefore, the HEAD version is architecturally superior and should be preferred.

```javascript

const onlyOAS3 =
  (selector) =>
  (state, ...args) =>
  (system) => {
    if (system.getSystem().specSelectors.isOAS3()) {
      const selectedValue = selector(state, ...args)
      return typeof selectedValue === "function"
        ? selectedValue(system)
        : selectedValue
    } else {

```