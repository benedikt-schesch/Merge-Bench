<think>
No reasoning found</think>
Looking at this merge conflict, I need to understand the semantic intent of both sides:

**HEAD (current branch):**
- Uses `program.buildOnce` as the condition
- Exits with code 1 if there's a `buildError`, or 0 if successful
- This provides proper error handling by checking the build result

**Incoming change:**
- Uses `options.buildOnce` as the condition
- Always exits with code 0 (success)
- Doesn't consider the build result

The semantic intent appears to be:
1. Both sides want to exit after a single build when a "buildOnce" flag is set
2. HEAD wants to properly signal build failures via exit codes
3. The incoming change renamed `program` to `options` but lost the error handling

The best resolution would combine the variable rename with the proper error handling:

```javascript
    console.log(colors.red('Error: ' + err.toString()))
  })

  const buildError = await build(inputPath)

  if (options.buildOnce) {
    process.exit(buildError ? 1 : 0)
  } else {
    watch()
  }
}


```