<think>
No reasoning found</think>
Looking at this merge conflict, I need to understand what both sides are trying to achieve:

- **HEAD**: Uses `!ie_upto8` and has a ternary expression `(ie ? !e.buttons : !e_button(e))`
- **Other branch**: Uses `(ie && !ie_lt10)` and has the same ternary expression `? !e.buttons : !e_button(e)`

The key difference is in the browser detection logic:
- `!ie_upto8` means "not IE up to version 8" (i.e., IE9+)
- `(ie && !ie_lt10)` means "IE and not less than 10" (i.e., IE10+)

Both sides are trying to handle browser-specific behavior for mouse button detection:
- For certain IE versions: use `!e.buttons`
- For other browsers: use `!e_button(e)`

The semantic intent appears to be determining which IE versions should use the `e.buttons` property. The conflict is about whether this should apply to IE9+ or IE10+.

Since `e.buttons` is a newer API that was introduced in IE9 but had better support in IE10+, and the other branch is more specific about requiring IE10+, the more conservative approach from the other branch seems more appropriate.

```javascript
      pushPendingSelection(doc, doc.history.done);
      doc.history.atomicSelection = false;
    }

    var move = operation(cm, function(e) {
      if ((ie && !ie_lt10) ?  !e.buttons : !e_button(e)) done(e);
      else extend(e);
    });
    var up = operation(cm, done);
    on(document, "mousemove", move);
    on(document, "mouseup", up);

```