<think>
No reasoning found</think>
Looking at this merge conflict, I need to understand what both sides are trying to achieve:

**HEAD (left side):**
- Checks if the editor is not focused and calls `onFocus(cm)` if needed
- Calls `signalDOMEvent(cm, e)` and returns if it returns true
- Has a comment about IE and escape key handling

**Right side (e1cfb7fd):**
- Calls `ensureFocus(cm)` (likely similar intent to the focus check)
- Calls `signalDOMEvent(cm, e)` AND also checks for `cm.options.onKeyEvent` callback
- Uses `old_ie` variable instead of `ie_upto10` for IE escape key handling
- Has the same escape key returnValue logic

The semantic intent of both sides seems to be:
1. Ensure the editor is focused
2. Handle DOM events and optional key event callbacks
3. Handle IE-specific escape key behavior

The main differences are:
- Different focus handling approach (`onFocus` vs `ensureFocus`)
- Right side adds support for `onKeyEvent` option
- Different variable names for IE detection (`ie_upto10` vs `old_ie`)

Here's the resolved conflict that preserves both intents:

```javascript
  }

  var lastStoppedKey = null;
  function onKeyDown(e) {
    var cm = this;
    if (!cm.state.focused) onFocus(cm);
    if (signalDOMEvent(cm, e) || cm.options.onKeyEvent && cm.options.onKeyEvent(cm, addStop(e))) return;
    // IE does strange things with escape.
    if (ie_upto10 && e.keyCode == 27) e.returnValue = false;
    var code = e.keyCode;
    cm.display.shift = code == 16 || e.shiftKey;
    var handled = handleKeyBinding(cm, e);

```