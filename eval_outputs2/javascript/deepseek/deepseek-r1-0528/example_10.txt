<think>
No reasoning found</think>
Based on analyzing the merge conflict and surrounding context, I'll resolve this by preserving the variable assignment since it's used in the `afterEach` hook. Here's the resolved version:

```javascript
beforeEach(() => {
  jest.resetModules()
  act = require('../pure').act
  asyncAct = require('../act-compat').asyncAct
  React = require('react')
  consoleErrorMock = jest.spyOn(console, 'error').mockImplementation(() => {})
})

afterEach(() => {
  consoleErrorMock.mockRestore()
})
```

**Resolution reasoning:**
1. Both branches mock `console.error` in beforeEach
2. The `afterEach` hook depends on `consoleErrorMock` variable
3. The other branch's version would break `afterEach` since it doesn't assign the mock
4. Preserving variable assignment maintains consistency with surrounding context
5. Semantic intent of both branches (mocking console errors) is preserved