<think>
No reasoning found</think>
I've analyzed the merge conflict and resolved it based on the semantic intent of both branches. The solution maintains the global variable declaration from the other branch while preserving the new `upgradeInsts` constant from the HEAD branch.

Here's the resolved code:

```javascript
const {Transfer} = require('./transfer')
const {fsExport: fs} = require('./fs')
const Upgrade = require('./download-upgrade')

const sftpInsts = {}
global.transferInsts = {}
const upgradeInsts = {}

/**
 * add ws.s function
 * @param {*} ws
 */

```

Resolution reasoning:
1. The other branch (c06b9d03) wants `transferInsts` to be a global variable (`global.transferInsts`)
2. The HEAD branch introduces a new constant `upgradeInsts` that's not present in the other branch
3. Both changes are preserved since they serve different purposes:
   - `global.transferInsts` for global access
   - `upgradeInsts` remains a module-level constant
4. The `sftpInsts` declaration remains unchanged as it's common to both branches
5. All original spacing and context is preserved exactly as provided