<think>
No reasoning found</think>
I'll analyze the merge conflict based on the intent and semantics of both sides.

### Analysis of the Merge Conflict
- **HEAD (Left Side)**: The code uses `canvas.drawBitmap()` to explicitly draw the scene's viewport bitmap onto the canvas. This approach directly accesses the bitmap and its rectangle from the scene's viewport object, suggesting a more manual or low-level drawing strategy. The intent seems to be to control the drawing process explicitly.
- **Branch (Right Side)**: The code uses `scene.draw(canvas)` which implies a higher-level abstraction where the `Scene` class itself handles the drawing logic. The intent here is likely to encapsulate the drawing process within the `Scene` class, making the code cleaner and more modular.

### Resolution Strategy
The semantic intent of both sides is to draw the scene onto the canvas. The difference lies in the approach: one is explicit and manual, while the other is abstracted through a method call. Given modern software engineering principles that favor encapsulation and abstraction, the right side (`scene.draw(canvas)`) is likely the better choice as it delegates the responsibility of drawing to the `Scene` class, which is more maintainable and reduces the risk of errors from directly manipulating internal structures like `bitmap` and `bitmapRect`.

Thus, I will resolve the conflict by adopting the right side's approach.

### Resolved Code Snippet
```java
		
		// tell the scene to update it's viewport bitmap
		scene.update();
		
		// draw it
		scene.draw(canvas);
    	if (DEBUG){
    		long now = System.currentTimeMillis();
			double n = ((double)now)/1000L;
			double s = ((double)startTime)/1000L;
			double fps = 1L/(n-s);
```