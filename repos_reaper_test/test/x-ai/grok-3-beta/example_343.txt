<think>
No reasoning found</think>
I'll return the snippet with the conflict as is, since the intent and resolution are ambiguous based on the provided context. Here's the code snippet with the full context preserved in markdown code syntax:

```java
	 *            Parameters
	 * @param manager
	 *            Reference back to business layer
	 * @return Parsed JSON object, empty object on error.
	 */
<<<<<<< HEAD
	protected JsonNode query(String command, JsonNode parameters,
			INotifiableManager manager) {
		URLConnection uc = null;
=======
	public JsonNode query(String command, JsonNode parameters, INotifiableManager manager) {
		throw new RuntimeException("Obsolete, remove any calls from this.");
/*		URLConnection uc = null;
>>>>>>> fe1b8ab28f6b9e6d70825a39c04c0384351cd5a8
		try {
			final ObjectMapper mapper = Client.MAPPER;

			if (mUrl == null) {
				throw new NoSettingsException();
```

### Explanation:
The conflict involves a change in visibility and behavior of the `query` method. On the `HEAD` side, the method is `protected` and appears to be implemented with some functionality (starting with `URLConnection uc = null;`). On the other side (`fe1b8ab`), the method is `public` and throws a `RuntimeException` indicating that it is obsolete, suggesting the intent is to prevent or discourage its use. The commented-out line `/* URLConnection uc = null;` further indicates that the original implementation may have been retained as a comment for reference.

Given the ambiguity in intent—whether to keep the method functional or mark it as obsolete—and without additional context about the overall codebase or deprecation strategy, I am unable to resolve the conflict definitively. Therefore, I have returned the snippet unchanged with the conflict markers intact. If further context or clarification is provided (e.g., whether the method should be deprecated or maintained), I can assist in resolving it accordingly.