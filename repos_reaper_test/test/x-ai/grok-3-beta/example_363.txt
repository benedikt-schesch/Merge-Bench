<think>
No reasoning found</think>
Below is the provided code snippet with the merge conflict preserved, as the intent and semantics of the conflicting changes are clear and can be resolved. I will also provide an explanation of the resolution after the snippet.

```java
  public static GoogleUrl create(String encodedServerUrl, String pathTemplate, Object parameters)
      throws IllegalArgumentException {
    GoogleUrl url = new GoogleUrl(encodedServerUrl);

    HashMap<String, Object> requestMap = new HashMap<String, Object>();
<<<<<<< HEAD
    for (Map.Entry<String, Object> entry : DataUtil.mapOf(parameters).entrySet()) {
=======
    for (Map.Entry<String, Object> entry : Data.mapOf(parameters).entrySet()) {
>>>>>>> f1253614bee81db4cd5344faaa5c73a5c51b2c5b
      Object value = entry.getValue();
      if (value != null) {
        requestMap.put(entry.getKey(), value);
      }
    }
```

### Explanation of Conflict and Resolution
The merge conflict arises from a difference in the class or utility used to convert the `parameters` object into a map. Let's analyze the intent and semantics of both sides:

- **HEAD (DataUtil.mapOf(parameters))**: This version uses `DataUtil.mapOf()` to convert the `parameters` object into a map. The intent appears to be using a utility class named `DataUtil` for this conversion, potentially indicating a custom or older implementation for handling data mapping in the codebase.
- **f1253614bee81db4cd5344faaa5c73a5c51b2c5b (Data.mapOf(parameters))**: This version uses `Data.mapOf()` to perform the same conversion. The intent here suggests a refactoring or update to use a different utility class or a newer, possibly more standardized, `Data` class for mapping.

### Semantic Resolution
Both sides aim to achieve the same goal: converting the `parameters` object into a map of key-value pairs to iterate over. The difference lies in the utility class used (`DataUtil` vs. `Data`), which likely reflects a naming or structural change in the codebase.

**Resolved Code:**
I would resolve the conflict in favor of the newer or more standardized naming convention, assuming `Data.mapOf()` (from the branch) represents the updated or preferred utility based on the commit reference. However, this assumption should be validated by checking the broader codebase context, documentation, or commit history to confirm which utility is currently in use or preferred. If there is no clear indication, or if `DataUtil` is still relevant, further discussion with the team or author of the changes may be necessary.

For now, assuming `Data.mapOf()` is the intended utility (from the branch), the resolved code snippet would be:

```java
  public static GoogleUrl create(String encodedServerUrl, String pathTemplate, Object parameters)
      throws IllegalArgumentException {
    GoogleUrl url = new GoogleUrl(encodedServerUrl);

    HashMap<String, Object> requestMap = new HashMap<String, Object>();
    for (Map.Entry<String, Object> entry : Data.mapOf(parameters).entrySet()) {
      Object value = entry.getValue();
      if (value != null) {
        requestMap.put(entry.getKey(), value);
      }
    }
```

If there is uncertainty or ambiguity in the codebase (e.g., both `DataUtil` and `Data` exist and have different behaviors), I recommend keeping the conflict markers as they are in the original snippet and discussing with the relevant stakeholders. Since the intent seems clear (a naming or utility update), I have provided the resolution above, but the original snippet with conflict markers is preserved as requested for reference.