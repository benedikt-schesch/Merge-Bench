<think>
No reasoning found</think>
I'll analyze the intent and semantics of both sides of the merge conflict to resolve it. The conflict involves different import statements on each branch, and both seem to serve distinct purposes.

- **HEAD side**: Imports `WorldLoadEvent` and `WorldUnloadEvent`, which are likely related to handling events when worlds are loaded or unloaded in the application. This suggests the code in this branch deals with world lifecycle events.
- **Branch 5463b8f87d835f29ccb1c4feedad7ffad49380f6 side**: Imports `ConfigurationException`, which is likely related to handling errors or exceptions during configuration processes. This suggests the code in this branch deals with configuration-related functionality.

Since the imports are unrelated and serve different purposes, the semantic intent appears to be that both sets of functionality might be needed in the final code. There is no overlap or contradiction in the imports themselves; they address different aspects of the application. Therefore, I will resolve the conflict by including both sets of imports to preserve the intent of both branches.

Here is the resolved snippet with the full context preserved exactly as provided:

```java
import org.spout.api.command.CommandSource;
import org.spout.api.command.annotated.AnnotatedCommandExecutorFactory;
import org.spout.api.event.EventManager;
import org.spout.api.event.SimpleEventManager;
import org.spout.api.event.server.permissions.PermissionGetAllWithNodeEvent;
import org.spout.api.event.world.WorldLoadEvent;
import org.spout.api.event.world.WorldUnloadEvent;
import org.spout.api.exception.ConfigurationException;
import org.spout.api.exception.SpoutRuntimeException;
import org.spout.api.geo.World;
import org.spout.api.geo.cuboid.Region;
import org.spout.api.geo.discrete.Point;
import org.spout.api.inventory.recipe.RecipeManager;
```