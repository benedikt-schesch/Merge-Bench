<think>
No reasoning found</think>
I'll return the snippet with the conflict resolved based on the semantic intent of both sides. My analysis is that both sides are trying to initialize a logger for the `Game` class, but they use slightly different methods to obtain the logger instance. The difference is in the way the logger is instantiated: `LogManager.getLogger` (from HEAD) versus `Logger.getLogger` (from the merged branch). Semantically, both aim to achieve the same goal of setting up logging, and `LogManager.getLogger` is typically associated with Log4j 2, which is likely the intended logging framework here given the context of modern Java practices. Therefore, I'll resolve the conflict by adopting the HEAD version.

Here is the snippet with the resolved conflict:

```java
   * be able to start.
   * <p>
   * We need 20 * maxPlayers cards. This allows black cards up to "draw 9" to work correctly.
   */
  public final static int MINIMUM_WHITE_CARDS_PER_PLAYER = 20;
  private static final Logger logger = LogManager.getLogger(Game.class);
  /**
   * Time, in milliseconds, to delay before starting a new round.
   */
  private final static int ROUND_INTERMISSION = 8 * 1000;
  /**
```