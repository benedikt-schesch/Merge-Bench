<think>
No reasoning found</think>
I'm returning the snippet with the resolved merge conflict. The intent of both sides is clear: they are defining two `ArrayList` objects to store `User` and `Player` instances. The difference between the two sides is purely syntacticâ€”`HEAD` uses raw types (`ArrayList<User>`), while the other branch (`5adedd248...`) uses parameterized types with the diamond operator (`ArrayList<>`). The semantic intent is identical, as both are initializing empty lists for the same purpose. Modern Java practices favor the diamond operator for conciseness and readability, so I will resolve the conflict by adopting the style from the branch `5adedd248...`.

Here is the full snippet with the resolved conflict, preserving the context and spacing exactly as provided:

```java
    }
  }

  private void skipIdlePlayers() {
    killRoundTimer();
    final List<User> playersToRemove = new ArrayList<>();
    final List<Player> playersToUpdateStatus = new ArrayList<>();
    synchronized (roundPlayers) {

      for (final Player player : roundPlayers) {
        final List<WhiteCard> cards = playedCards.getCards(player);
        if (cards == null || cards.size() < blackCard.getPick()) {

```