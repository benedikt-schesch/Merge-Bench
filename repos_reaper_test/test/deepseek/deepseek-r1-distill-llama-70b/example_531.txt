<think>
No reasoning found</think>
To resolve this merge conflict, we need to consider the intent of both versions:

1. The HEAD version checks if either left or right is null, which correctly handles nodes with one or no children
2. The other version only checks if the right is nil (likely a typo for null), which would miss cases where the left is null

The semantically correct approach is to check if either side is null. Therefore, we keep the HEAD version:

```java
	/**
	 * Remove the node u from the binary search tree
	 * @param u
	 */
	protected void remove(Node u) {
<<<<<<< HEAD
		if (u.left == null || u.right == null) {
=======
		if (u.right == nil) {
>>>>>>> 2729e32788bc1fe1d320a3ba0e5fe5a7bddc630a
			splice(u);
		} else {
			Node w = u.right;
			while (w.left != nil) 
				w = w.left;
```