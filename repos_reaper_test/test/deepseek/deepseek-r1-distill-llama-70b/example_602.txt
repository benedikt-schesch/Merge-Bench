<think>
No reasoning found</think>
To resolve this merge conflict, we need to determine which condition better achieves the intended functionality while maintaining safety and robustness. The original code checks if `rawLabels` is an object, while the other branch checks for the presence of a "data" field. Checking for "data" ensures the necessary field exists, preventing potential NullPointerExceptions and making the code more reliable.

```java
    return labels.remove(label);
  }

  @JsonMappingCompleted
  protected void convertLabels(JsonMapper jsonMapper) {
    if (rawLabels != null && rawLabels.get("data") != null) {
      String innerLabelsString = rawLabels.get("data").toString();
      labels = jsonMapper.toJavaList(innerLabelsString, PageLabel.class);
    }
  }
```