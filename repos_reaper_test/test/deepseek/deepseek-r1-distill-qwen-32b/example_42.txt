<think>
No reasoning found</think>
The conflict appears to be a formatting change in the method signature between two versions. Both versions are functionally equivalent but have different formatting styles for the exception declarations. One version splits the exceptions onto separate lines while the other keeps them on a single line.

Since this is purely a stylistic difference and does not affect functionality, either version could be chosen based on coding style preferences. However, the most common style in Java is to list exceptions on separate lines when there are multiple exceptions, which is what the HEAD version does.

So I will resolve the conflict by keeping the HEAD version since it follows the more common Java styling convention.

Here is the conflict resolved in favor of the HEAD version:

```java
   *
   * @param user Spectator to add to this game.
   * @throws TooManySpectatorsException Thrown if this game is at its maximum spectator capacity.
   * @throws IllegalStateException      Thrown if {@code user} is already in a game.
   */
  public void addSpectator(final User user) throws TooManySpectatorsException,
      IllegalStateException {
    logger.info(String.format("%s joined game %d as a spectator.", user.toString(), id));
    synchronized (spectators) {
      if (spectators.size() >= options.spectatorLimit) {
        throw new TooManySpectatorsException();
      }
```