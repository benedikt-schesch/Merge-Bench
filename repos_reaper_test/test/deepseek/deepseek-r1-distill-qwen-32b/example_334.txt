<think>
No reasoning found</think>
As a semantic merge conflict resolution expert, I will analyze the provided code snippet and attempt to resolve the merge conflict based on the intent and semantics of both sides.

```java
        mPhotoTask.execute(params);
    }
}

<<<<<<< HEAD
	private class GetPhotoTask extends GenericTask {
=======
	//FIXME: 换数据库后, 图片无法显示
	private class GetPhotoTask extends AsyncTask<String, Void, TaskResult> {
>>>>>>> 3cac0b691a1f6bce876565b41eb831a0f4e82d6d

    @Override
	protected TaskResult _doInBackground(TaskParams...params) {
    	TaskParams param = params[0];
        try {

```

**Analysis and Resolution:**

1. **Conflict Overview:**
   - The merge conflict arises from two different implementations of the `GetPhotoTask` class.
   - One side extends `GenericTask`, while the other extends `AsyncTask` with specific type parameters (`AsyncTask<String, Void, TaskResult>`).

2. **Intent of Changes:**
   - The `AsyncTask` version includes a `FIXME` comment indicating issues with image display after switching databases. This suggests an attempt to fix the issue by altering the task's implementation.
   - The `GenericTask` version appears to be a custom task implementation, possibly part of a different framework or pattern.

3. **Conflict Resolution:**
   - If the intent is to use Android's `AsyncTask` for asynchronous operations and proper lifecycle management, the `AsyncTask` version should be adopted.
   - If the `GenericTask` is part of a custom framework or necessary for specific functionality, it should be retained, and the FIXME issue should be addressed separately.

**Note:** Without additional context about the project's architecture or the role of `GenericTask`, both options are viable. Choosing between them depends on the project's requirements and the intended use of `GetPhotoTask`.

**Resolved Code (if choosing `AsyncTask`):**

```java
        mPhotoTask.execute(params);
    }
}

// FIXME: 换数据库后, 图片无法显示
private class GetPhotoTask extends AsyncTask<String, Void, TaskResult> {

    @Override
    protected TaskResult _doInBackground(TaskParams... params) {
        TaskParams param = params[0];
        try {

```

**Resolved Code (if choosing `GenericTask`):**

```java
        mPhotoTask.execute(params);
    }
}

private class GetPhotoTask extends GenericTask {

    @Override
    protected TaskResult _doInBackground(TaskParams... params) {
        TaskParams param = params[0];
        try {

```

If the intent is unclear or further clarification is needed, the original conflict should be preserved.