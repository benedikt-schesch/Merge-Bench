<think>
No reasoning found</think>
Based on the analysis, the merge conflict can be resolved by combining the features from both branches since there's no overlap in variable names. Here's the resolved code:

```java
  private CallbackContext initCallbackContext;
  private CallbackContext scanCallbackContext;
  private Object scanLock = new Object();
  private CallbackContext permissionsCallback;
  private CallbackContext locationCallback;
  private CallbackContext initPeripheralCallback;
  private BluetoothGattServer gattServer;
  private CallbackContext addServiceCallback;
  private CallbackContext advertiseCallbackContext;
  private boolean isAdvertising = false;

  //Store connections and all their callbacks
  private HashMap<Object, HashMap<Object,Object>> connections;

  //Discovery related variables
```

**Step-by-Step Explanation:**

1. **Identify Variables:** Each branch adds distinct private variables without naming conflicts.
2. **Determine Functionality:** The variables in each branch serve different purposes (one for callbacks, another for Bluetooth operations).
3. **Combine Variables:** Merge both sets to retain all functionalities.
4. **Result:** The resolved code includes all variables from both branches, ensuring all necessary features are present.