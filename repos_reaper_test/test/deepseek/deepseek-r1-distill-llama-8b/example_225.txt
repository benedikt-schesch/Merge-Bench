<think>
No reasoning found</think>
To resolve the merge conflict, we need to align both sides. The left side's `registerFunction` and query can be considered a simpler approach, while the right's method uses a lambda function as a parameter. The right's query construction is more sophisticated, so we'll use that but keep the `registerFunction` as the left side's setup.

```java
        PrintStream ps = new PrintStream(new FileOutputStream(tmpFile));
        for(int i = 0; i < 1; i++) {
            ps.println(i);
        }
        ps.close();
<<<<<<< HEAD
        pig.registerFunction("foo", MyApply.class.getName()+"('foo')");
        String query = "foreach (group (load 'file:"+Util.encodeEscape(tmpFile.toString())+"' using " + MyStorage.class.getName() + "()) by " + MyGroup.class.getName() + "('all')) generate flatten(foo($1)) ;";
=======
        pig.registerFunction("foo",
            new FuncSpec(MyApply.class.getName()+"('foo')"));
        String query = "foreach (group (load '"+Util.generateURI(tmpFile.toString())+"' using " + MyStorage.class.getName() + "()) by " + MyGroup.class.getName() + "('all')) generate flatten(foo($1)) ;";
>>>>>>> 1488b22ce313803d012c8ace36c3b12f930ee309
        System.out.println(query);
        pig.registerQuery("asdf_id = " + query);
        Iterator it = pig.openIterator("asdf_id");
        tmpFile.delete();
        Tuple t;
```