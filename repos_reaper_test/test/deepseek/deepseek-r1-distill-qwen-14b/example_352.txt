<think>
No reasoning found</think>
```java
        transport.createRequestFactory().buildGetRequest(HttpTesting.SIMPLE_GENERIC_URL);
    request.setThrowExceptionOnExecuteError(false);
    HttpResponse response = request.execute();
    GoogleJsonResponseException responseException =
        GoogleJsonResponseException.from(GoogleJsonErrorTest.FACTORY, response);
<<<<<<< HEAD
    assertNull(responseException.getDetails());
    String expectedMessage = "403\nGET " + HttpTesting.SIMPLE_GENERIC_URL;
    assertEquals(expectedMessage, responseException.getMessage());
=======
    assertNull(ge.getDetails());
    assertTrue(ge.getMessage().startsWith("403"));
>>>>>>> 47d00185e2cd4548663cc0e8c6cdf6d59640a613
  }

  public void testFrom_detailsArbitraryXmlContent() throws Exception {
    HttpTransport transport = new ErrorTransport("<foo>", "application/atom+xml; charset=utf-8");
    HttpRequest request =

```

The conflict above shows two different ways of handling the GoogleJsonResponseException. The left side (HEAD) asserts that the exception's details are null and that the message matches an expected string, while the right side attempts to check if the message starts with "403" but incorrectly refers to an undefined variable 'ge'.

Since the intent is to test the exception message correctly, the left side is preferable as it accurately uses the defined variable and checks for the exact expected message.