<think>
No reasoning found</think>
The conflict appears to be about how to handle the expected output verification for an empty result set. Both sides aim to verify that the query returns no results. The left side uses `Util.checkQueryOutputsAfterSort` with an empty list, while the right side uses Guava's `ImmutableMultiset` and a different verification method.

Given the intent to verify an empty result set, both approaches are valid. However, the right side's approach using `Multiset` is more concise and leverages Guava's utilities. It's likely the preferred approach.

```java
      String query = "DATA = LOAD 'empty' USING mock.Storage();"
        + "A = rank DATA;"
        + "store A into 'empty_result' using mock.Storage();";

      Util.registerMultiLineQuery(pigServer, query);
<<<<<<< HEAD
      List<Tuple> expected = Util.getTuplesFromConstantTupleStrings(new String[]{});
      Util.checkQueryOutputsAfterSort(data.get("empty_result"), expected);
=======
      Multiset<Tuple> expected = ImmutableMultiset.of();
      verifyExpected(data.get("empty_result"), expected);
>>>>>>> b91691ef1d20e616fd9c37d4018eb0db78db8898
    }

    @Test
    public void testRankWithSplitInMap() throws Exception {
        String query = "R1 = LOAD 'testsplit' USING mock.Storage() AS (a:int,b:int);"
```