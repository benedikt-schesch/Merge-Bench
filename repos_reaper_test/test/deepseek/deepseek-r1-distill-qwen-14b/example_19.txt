<think>
No reasoning found</think>
The provided code snippet includes a merge conflict where one side defines a concrete `start()` method, while the other defines an abstract `start()` and an overload with a boolean parameter. The conflict arises from differing approaches to implementing the `start()` method. Without a clear understanding of the project's design intent, it's best to preserve the conflict.

```java
	@Override
	public String getAPIVersion() {
		return SpoutEngine.class.getPackage().getImplementationVersion();
	}

<<<<<<< HEAD
	public void start() {
=======
	public abstract void start();

	public void start(boolean checkWorlds) {
>>>>>>> 67bcb76a96f358fc131320b0611ffaa3bf3678c2
		Spout.info("Spout is starting in {0}-only mode.", getPlatform().name().toLowerCase());
		Spout.info("Current version is {0} (Implementing SpoutAPI {1}).", getVersion(), getAPIVersion());
		Spout.info("This software is currently in alpha status so components may");
		Spout.info("have bugs or not work at all. Please report any issues to");
		Spout.info("http://issues.spout.org");
```