<think>
No reasoning found</think>
Here is the entire snippet with surrounding context, preserving the original spacing and formatting:

```java
					out.append(" data-structr-success-notifications-custom-dialog-element=\"").append(generateDataAttributesForIdList(renderContext, triggeredAction, ActionMapping.successNotificationElements)).append("\"");
					break;

				case "fire-event":
					out.append(" data-structr-success-notifications-event=\"").append(triggeredAction.getProperty(ActionMapping.successNotificationsEventProperty)).append("\"");
<<<<<<< HEAD
					break;

				case "inline-text-message":
					final Integer delay = triggeredAction.getProperty(StructrApp.key(ActionMapping.class, "successNotificationsDelay"));
					out.append(" data-structr-success-notifications-delay=\"").append(delay.toString()).append("\"");
=======
					break;

				case "inline-text-message":
					final Integer delay = triggeredAction.getProperty(StructrApp.key(ActionMapping.class, "successNotificationsDelay"));
					out.append(" data-structr-success-notifications-delay=\"").append(delay != null ? delay.toString() : "null").append("\"");
>>>>>>> d72e83e2638205c5015a1f9cb06ac4df592921c5
					break;

				default:
					break;


```

The conflict appears to be in the way the `delay` property is being handled. On the left side (HEAD), the delay is being appended directly using `delay.toString()`, which could result in a `NullPointerException` if `delay` is null. On the right side, the delay is being checked for null and handled with a ternary operator. 

However, the way the ternary operator is written on the right side (without proper spacing around the `? :` operator) could be improved for readability. Both approaches seem to be trying to handle the delay property, but the null-safe handling on the right side is semantically better.

I've chosen to preserve the entire snippet with the conflict visible so you can examine it further. Let me know if you'd like me to propose a resolution!