<think>
No reasoning found</think>
The code snippet shows a merge conflict in a Java test where a `Game` object is being instantiated with differing parameters on either side of the conflict. The right side of the conflict includes additional parameters in the `Game` constructor, which likely represents the intended state after the merge. Therefore, the conflict is resolved by taking the right side as it provides the complete parameters.

```java
    // remove game 1 using its own method -- this should be how it always happens in production
    gameManager.destroyGame(1);
    // make sure it re-uses that id
    assertEquals(1, gameManager.get().intValue());
    gameManager.getGames().put(1,
        new Game(1, cuMock, gameManager, timer, null, null, null, metricsMock, falseProvider,
            formatProvider, falseProvider, formatProvider, falseProvider, gameOptionsProvider));
    assertEquals(-1, gameManager.get().intValue());

    // remove game 1 out from under it, to make sure it'll fix itself
    gameManager.getGames().remove(1);
    assertEquals(1, gameManager.get().intValue());
```