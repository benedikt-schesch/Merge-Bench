<think>
No reasoning found</think>
The code snippet contains a merge conflict where the mapRow method calls the AccountProviderParameters constructor with a different set of parameters. The left side (HEAD) includes `displayName` and `callbackUrl`, while the right side omits them. The right side seems to use a constructor with essential parameters, suggesting it's the intended version.

```java
	}
	
	private AccountProviderParameters getParameters(final String provider) {
		return jdbcTemplate.queryForObject(SELECT_ACCOUNT_PROVIDER_BY_NAME, new RowMapper<AccountProviderParameters>() {
			public AccountProviderParameters mapRow(ResultSet rs, int rowNum) throws SQLException {
<<<<<<< HEAD
				return new AccountProviderParameters(provider, rs.getString("displayName"), encryptor.decrypt(rs
						.getString("apiKey")), encryptor.decrypt(rs.getString("secret")), rs.getLong("appId"), rs
						.getString("requestTokenUrl"), rs.getString("authorizeUrl"), rs.getString("callbackUrl"), rs
						.getString("accessTokenUrl"));
=======
				return new AccountProviderParameters(provider, encryptor.decrypt(rs.getString("apiKey")), encryptor.decrypt(rs.getString("secret")), rs.getLong("appId"), rs.getString("requestTokenUrl"), rs.getString("authorizeUrl"), rs.getString("accessTokenUrl"));
>>>>>>> 228af53d8db4ea1b58282f203bd04a3d011b7a8
			}
		}, provider);
	}

<<<<<<< HEAD

```

To resolve, choose the right side as it likely reflects the correct parameter usage.