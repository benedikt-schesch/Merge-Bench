<think>
No reasoning found</think>
```java
  static {
    try {
      IS_WINDOWS =
          StandardSystemProperty.OS_NAME.value().toLowerCase(Locale.ENGLISH).startsWith("windows");
    } catch (Throwable ex) {
<<<<<<< HEAD
      Logger.getLogger(FileDataStoreFactory.class.getName()).log(java.util.logging.Level.SEVERE, ex.getMessage(), ex);
=======
      // The intent on the right side was to get more detailed error information, specifically the stack trace,
      // and to make it visible on the console, likely for debugging.
      // The intent on the left side (HEAD) was to log the error message using the standard Java logger.
      // A good semantic merge is to use the standard logger (as in HEAD) but ensure it logs the full exception details
      // (including the stack trace, as indicated by ex.printStackTrace() in the right side).
      // This is achieved by using the Logger.log(Level, String, Throwable) method.
      // We use ex.getMessage() as the message part, similar to HEAD, and pass the full 'ex' object
      // to ensure the stack trace is available to the logger's handlers and formatters.
      Logger.getLogger(FileDataStoreFactory.class.getName()).log(java.util.logging.Level.SEVERE, ex.getMessage(), ex);
>>>>>>> 6209970654c0b8d65624d98e1b49da29a99ee356
      throw ex;
    }
  }

  /** Directory to store data. */

```