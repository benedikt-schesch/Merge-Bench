<think>
Okay, let me try to figure out how to resolve this merge conflict. So, looking at the code snippet, there's a conflict in the case where the Bluetooth adapter is turning off. The HEAD version has some comments and code that resets isAdvertising to false and then closes the gattServer if it's not null. The other branch, from commit 094cb482d0c11e5f16a8f386fd5596e34e562015, just has the gattServer.close() part without the comments or the isAdvertising reset.

First, I need to understand the intent of both changes. The HEAD version adds a comment about resetting isAdvertising when the adapter is turning off. That makes sense because if the adapter is turning off, advertising should stop, so setting isAdvertising to false is correct. Then it closes the gattServer, but with a check to make sure it's not null. The other branch's change is simpler, just closing the gattServer if it exists.

The conflict arises because both branches modified the same part. The key here is to preserve both intents. The HEAD adds the isAdvertising reset and comments, while the other branch might have a simpler approach but misses those parts. Since the HEAD's changes include important state management (resetting isAdvertising) which the other branch doesn't have, we should keep that. The closing of gattServer is present in both, so we can keep the HEAD's version which includes the check and the comment.

Therefore, the resolved code should include both the isAdvertising reset and the gattServer close with the comments from HEAD, and remove the conflicting markers. The other branch's change only adds the gattServer close, which is already covered in HEAD, but without the comments and the isAdvertising line. So merging them would mean keeping the HEAD's additions and the gattServer close, as the other branch's code is a subset of HEAD's changes here.

Wait, but looking again, the other branch's code is just closing gattServer, while HEAD adds the isAdvertising part. So the correct resolution is to keep both the isAdvertising line and the gattServer close. There's no duplication, so combining both would include the reset of isAdvertising and closing the server. Therefore, the resolved code should have the HEAD's lines and the other branch's line, but since the other branch's line is already present in HEAD (the gattServer.close()), but maybe the other branch's code is different? Wait, no. Let me check again.

Wait, in the conflict:

HEAD has:
// Reset isAdvertising when adapter is turning off
if (isAdvertising) isAdvertising = false;

// Make sure gattServer is not null (in case this triggers when it is null)
if (gattServer != null) gattServer.close();

The other branch has:
if(gattServer != null) gattServer.close();

So the conflict is that the HEAD added the isAdvertising reset and comments, while the other branch just has the gattServer close. So when merging, we need to include both changes. The other branch's change is just the gattServer close, which is already in HEAD, but without the comments. So the correct resolution is to take the HEAD version, which includes the additional code and comments. Unless the other branch's code is different in some way, like formatting. Wait, in the other branch's code, the if statement is written without a space: if(gattServer != null), while in HEAD it's with a space: if (gattServer != null). But that's a minor formatting difference. But since the HEAD version has more code (the isAdvertising part), and the other branch's code is just the gattServer close, the merge should keep the HEAD version plus the other branch's change? Wait, no. Because both sides are modifying the same lines. The HEAD adds lines before closing the gattServer, and the other branch just has the gattServer close. So when merging, the correct approach is to include the HEAD's changes (isAdvertising reset and gattServer close with comments) because they are more comprehensive. The other branch's code is a subset. Therefore, the resolved code should be the HEAD version, as it includes all necessary changes. The other branch's code doesn't conflict except for the gattServer close, which is already in HEAD. Therefore, the conflict can be resolved by keeping the HEAD's code.</think>
```java

            if (initPeripheralCallback != null) initPeripheralCallback.sendPluginResult(pluginResult);

            break;
          case BluetoothAdapter.STATE_TURNING_OFF:
            // Reset isAdvertising when adapter is turning off
            if (isAdvertising) isAdvertising = false;

            // Make sure gattServer is not null (in case this triggers when it is null)
            if (gattServer != null) gattServer.close();
            break;
          case BluetoothAdapter.STATE_ON:

            addProperty(returnObj, keyStatus, statusEnabled);

```