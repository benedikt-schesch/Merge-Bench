<think>
Okay, let's take a look at this merge conflict. The conflict is in a Java file, specifically around the Thread.sleep() method. The two branches have different sleep times: HEAD uses 30,000 milliseconds, and the other branch uses 8,000. 

First, I need to understand why these changes were made. Maybe in one branch, they needed a longer sleep for testing something, while the other branch reduced it for faster execution. But without more context, it's hard to tell the exact reason. 

Since the user mentioned resolving based on intent and semantics, I should consider what each side is trying to achieve. If both changes are valid but conflicting, perhaps the correct approach is to choose the one that makes more sense in the broader context. However, since I don't have additional information about why these values were changed, it's ambiguous.

The instructions say if unsure or if the intent is ambiguous, return the same snippet with the conflict. Since I can't determine which sleep duration is appropriate here, it's safer to leave the conflict unresolved. Modifying it without knowing the reasoning behind each change could introduce errors. So the best course of action is to keep the conflict markers as they are.</think>
```java
            });
        }
        mapReference.set(mapBuilder.createPersistedTo(mapFile));
        try (ExternalMapQueryContext<Integer, Integer, ?> c = mapReference.get().queryContext(KEY)) {
            c.writeLock().lock();
<<<<<<< HEAD
            Thread.sleep(30_000);
=======
            Thread.sleep(8_000);
>>>>>>> 67b612c2568b82917bb090cac5046a34462e9d24
        }
    }

    private static ChronicleMapBuilder<Integer, Integer> createMapBuilder() {
        return ChronicleMapBuilder

```

The conflict remains unresolved as the sleep duration change (30s vs 8s) appears semantically significant but lacks context about the intent behind either value. This likely represents a genuine conflict that requires human judgment to determine the appropriate timeout duration for the specific use case.