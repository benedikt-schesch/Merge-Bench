<think>
Okay, let's look at this merge conflict. The conflict is in the else block where the code adds "contentOffset" to the initiationRequestUrl. 

In the HEAD version, there's a check if contentOffset is not equal to -1 before adding it. The other branch (2b9e9a2) adds contentOffset unconditionally. 

So the intent here seems to be that one side wants to include contentOffset only when it's not -1, while the other side always includes it. To resolve this, I need to determine if there's a scenario where contentOffset could be -1 and whether it's safe to always include it.

If the contentOffset is set to -1 to indicate that it's not present, then the HEAD version is correct because it avoids adding a parameter with -1. However, if the other branch assumes that contentOffset is always a valid value (maybe it's initialized to 0 or another default), then unconditionally adding it would be okay.

But looking at the code, in the HEAD version, they check for contentOffset != -1, implying that -1 is a sentinel value meaning "not set". Therefore, the correct resolution would be to keep the conditional check from HEAD but also ensure that the code from the other branch is incorporated. Wait, but the other branch's code is just adding it without the check. 

Wait, the conflict is between the HEAD's conditional addition and the other branch's unconditional addition. So the correct resolution would be to keep the conditional. But maybe the other branch was a fix where contentOffset should always be added, even if it's -1. But that depends on the API requirements. If the API expects contentOffset even when it's -1, then the other branch is correct. But if the API should omit it when it's -1, then HEAD is right.

Since I don't have context about the API, I need to make a semantic decision. If -1 is a valid value that needs to be sent, then include it unconditionally. If -1 means "not set", then keep the condition. 

But the original code in HEAD has the condition, suggesting that contentOffset is optional and only added when not -1. The other branch removes that condition, which might be a mistake or an intentional change. 

Assuming that both changes are intentional, but perhaps the correct approach is to check if contentOffset is not -1, so that we don't add a parameter with -1. Therefore, the resolved code should include the conditional from HEAD. But wait, the other branch's code is adding it unconditionally. How to merge these?

Wait, the conflict is between the two branches. The HEAD has the if statement, and the other branch doesn't. The correct resolution would be to keep the if statement, because that's more specific. Unless the other branch intended to always set contentOffset, perhaps because the default is now 0 instead of -1. But without more context, it's safer to assume that the conditional was intentional in HEAD to avoid adding the parameter when it's -1. Therefore, the resolved code should keep the conditional from HEAD. Therefore, the merge conflict is resolved by accepting the HEAD version.</think>
```java
    if (metadata != null) {
      content = new MultipartContent().setContentParts(Arrays.asList(metadata, mediaContent));
      initiationRequestUrl.put("uploadType", "multipart");
    } else {
      initiationRequestUrl.put("uploadType", "media");
      if (contentOffset != -1) {
        initiationRequestUrl.put("contentOffset", String.valueOf(contentOffset));
      }
    }
    HttpRequest request =
        requestFactory.buildRequest(initiationRequestMethod, initiationRequestUrl, content);
    request.getHeaders().putAll(initiationHeaders);
    // We do not have to do anything special here if media content length is unspecified because
```