<think>
No reasoning found</think>
To resolve the given merge conflict, let's analyze the code snippet and understand the intent behind both sides of the merge.

The snippet is a part of a Java class, specifically a constructor for `GameChatHandler`. It involves dependency injection using the `@Inject` annotation, indicating that it's part of a dependency injection framework, likely Guice given the `@Inject` annotation.

The class has two final fields: `users` of type `ConnectedUsers` and `gameChatEnabled` of type `boolean`. The constructor `GameChatHandler` takes several parameters, and the conflict arises in its parameter list.

On the left side of the conflict (`<<<<<<< HEAD`), the constructor is defined with three parameters:
- `gameManager` of type `GameManager`
- `chatFilter` of type `ChatFilter`
- `users` of type `ConnectedUsers`

On the right side (`>>>>>>> ed08e371978529db8a908e266dc1a8add1d37967`), the constructor is defined with four parameters, adding `@GameChatEnabled final boolean gameChatEnabled` to the end.

Looking at the body of the constructor, it initializes `this.chatFilter`, `this.users`, and `this.gameChatEnabled`. The presence of `this.gameChatEnabled = gameChatEnabled;` indicates that `gameChatEnabled` is a field of the class, and its initialization is intended.

However, on the left side of the conflict, the constructor does not have `gameChatEnabled` as a parameter, suggesting that it might be initialized elsewhere or is a default value. On the right side, `gameChatEnabled` is explicitly passed as a parameter with a specific annotation `@GameChatEnabled`, indicating that it's a configurable or injected value.

The intent seems to be that `gameChatEnabled` is a necessary parameter for the `GameChatHandler` constructor, as evidenced by its assignment in the constructor body and its presence as a field. The annotation `@GameChatEnabled` on the `boolean gameChatEnabled` parameter on the right side suggests that this value is specifically configured or annotated, possibly indicating it's not just any boolean but one that is bound or configured in a certain way (e.g., through a binding annotation in Guice).

To resolve the conflict while preserving the intent of both sides, we need to ensure that `gameChatEnabled` is both a parameter and properly annotated, as it seems crucial for the constructor. Thus, the resolved constructor should include all necessary parameters.

Here is the resolution:

```java
  private final ConnectedUsers users;
  private final boolean gameChatEnabled;

  @Inject
  public GameChatHandler(final GameManager gameManager, final ChatFilter chatFilter,
      final ConnectedUsers users, @GameChatEnabled final boolean gameChatEnabled) {
    super(gameManager);
    this.chatFilter = chatFilter;
    this.users = users;
    this.gameChatEnabled = gameChatEnabled;
  }
```