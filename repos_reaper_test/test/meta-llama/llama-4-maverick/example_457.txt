<think>
No reasoning found</think>
To resolve the given merge conflict, let's first understand the context and the changes made on both sides.

The code snippet is written in Java and includes various import statements for different libraries, including Apache Commons. The merge conflict arises from the fact that the local branch (`HEAD`) has an import statement for `org.apache.commons.codec.digest.DigestUtils` that is not present in the other branch (`31d7966e3896819a99b31f10e83e864e3805bcbd`).

Let's analyze the intent and semantics:

1. **Import Statements Context**: The import statements are used to bring in external classes or utilities that are used within the Java file. The presence or absence of a specific import statement indicates whether the corresponding class or utility is being used in the code.

2. **`HEAD` Branch**: The `HEAD` branch includes an import statement for `DigestUtils` from Apache Commons Codec. This suggests that somewhere in the code (not shown in the snippet), `DigestUtils` is being used, likely for hashing or digest operations.

3. **`31d7966e3896819a99b31f10e83e864e3805bcbd` Branch**: This branch does not include the import statement for `DigestUtils`. There are two possible interpretations:
   - The code in this branch does not use `DigestUtils`.
   - The usage of `DigestUtils` has been removed or is not yet added in this branch.

Given the information and focusing on the semantics and intent:

- If the code in `HEAD` uses `DigestUtils` and it's a necessary import, removing it (as the conflict resolution on the `31d7966e3896819a99b31f10e83e864e3805bcbd` side does) would result in a compilation error unless the usage of `DigestUtils` is also removed.
- The other import statements and the Javadoc comment suggest that the class is a utility class for various methods, and the import for `DigestUtils` is specific to some functionality that might be related to hashing or encryption, given the context of other imports (e.g., `javax.crypto`).

To resolve the conflict without modifying the context or the spacing, and considering the intent might be to keep the functionality that includes the use of `DigestUtils`, we should preserve the import statement if it's used in the code not shown in the snippet.

However, without seeing the actual usage of `DigestUtils` in the code or understanding the specific changes made in the `31d7966e3896819a99b31f10e83e864e3805bcbd` branch, the safest resolution is to keep the conflict as is if we're unsure about the intent.

But, let's assume that the usage of `DigestUtils` is necessary and is used elsewhere in the code. In that case, we should resolve the conflict by keeping the import statement.

Here is the resolution in markdown code syntax, preserving the original spacing and context:

```java
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.io.FileUtils;

/**
 * Various utility methods that don't have more proper home.
 *
```