<think>
No reasoning found</think>
To resolve the given merge conflict, let's first understand the context and the changes made on both sides of the merge.

The code snippet is written in Java and appears to be part of a class definition for `Location`, which is used by several Graph API types. The class is documented with information about its author and since when it has been available.

The conflict arises from the difference in the parent class that `Location` extends. On one side (`HEAD`), `Location` extends `FacebookType`, while on the other side (`a17acec0655b8058aaf4d336ba2a1352aa49e2fe`), it extends `AbstractFacebookType`.

To resolve this conflict, we need to understand the intent behind the change from `FacebookType` to `AbstractFacebookType`. Typically, such a change could be due to a refactoring where `FacebookType` was either made abstract, renamed, or a new abstract class `AbstractFacebookType` was introduced as a base class for types like `Location`.

Without additional context about the nature of `FacebookType` and `AbstractFacebookType`, the most straightforward resolution would be to consider the change made in the other branch (`a17acec0655b8058aaf4d336ba2a1352aa49e2fe`) as it seems to be a more specific and potentially more correct or updated version of the class hierarchy.

However, to preserve the original intent and ensure that the resolution is semantically correct, we should check if `FacebookType` and `AbstractFacebookType` are related or serve the same purpose. If `AbstractFacebookType` is a new base class that `FacebookType` also extends, or if `FacebookType` has been refactored to be `AbstractFacebookType`, then the change makes sense.

Given the information available, the resolution involves choosing one of the two versions. Since `AbstractFacebookType` suggests a more specific and potentially abstract base class, it might be a more appropriate choice if the intent is to make the type hierarchy more abstract or flexible.

Here is the resolved snippet in markdown code syntax, preserving the original context and spacing:

```java
 * This is used by several Graph API types, e.g. <tt>{@link Post}</tt> and <tt>{@link Page}</tt>.
 * 
 * @author <a href="http://restfb.com">Mark Allen</a>
 * @since 1.6.8
 */
public class Location extends AbstractFacebookType {

  /**
   * The street address of this location.
   * 
   * @return The street address of this location.
```