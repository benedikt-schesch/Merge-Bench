<think>
No reasoning found</think>
To resolve the given merge conflict, we first need to understand the context and the changes introduced by both sides of the merge.

The given code snippet is in Java and appears to be part of a builder class, likely used for configuring a secure connection ( possibly HTTPS or TLS) given the presence of terms like `trustStore`, `mtlsKeyStore`, and `SecurityUtils`.

The conflict arises from the annotation `@Beta` being present on one side of the merge (HEAD) and not on the other side (51762f221ec8ab38da03149c8012e63aec0433dc).

Here's the step-by-step thought process:

1. **Understanding the context**: The method `trustCertificates` is being defined with parameters related to trust store and mutual TLS (mtls) key store configurations. The method is part of a `Builder` class, indicated by `public Builder trustCertificates`.

2. **Analyzing the conflict**: The conflict is about the presence or absence of the `@Beta` annotation on the `trustCertificates` method. The `@Beta` annotation typically signifies that the annotated class or method is in a state of flux and might change or be removed in the future.

3. **Semantics and intent**: 
   - The side represented by `HEAD` includes the `@Beta` annotation, suggesting that the method is considered beta-quality or subject to change.
   - The other side (represented by the commit hash `51762f221ec8ab38da03149c8012e63aec0433dc`) does not include this annotation, implying either that the method is considered stable or that the annotation was intentionally removed.

4. **Resolving the conflict**: To resolve this conflict, we need to consider the intent behind both changes. If the method's stability or beta status hasn't been conclusively decided or documented elsewhere, we need to decide whether the method should be marked as `@Beta` or not.

Given the information and without additional context on why `@Beta` was added or removed, it's challenging to definitively resolve the conflict based solely on the provided snippet. However, typically, if a feature or method is being marked as `@Beta`, it's to indicate its tentative nature to users of the API.

Since we are not given explicit instructions or additional context on the stability or intended status of the `trustCertificates` method, and we should not modify the context or spacing, the most straightforward resolution is to return the snippet as is, preserving the conflict markers if the intent is ambiguous.

Here is the snippet returned in markdown code syntax without any modifications:
```java
     *     or {@link SecurityUtils#loadKeyStoreFromCertificates})
     * @param mtlsKeyStore key store for client certificate and key to establish mutual TLS. (use
     *     for example {@link SecurityUtils#createMtlsKeyStore(InputStream)})
     * @param mtlsKeyStorePassword password for mtlsKeyStore parameter
     */
<<<<<<< HEAD
    @Beta
=======
>>>>>>> 51762f221ec8ab38da03149c8012e63aec0433dc
    public Builder trustCertificates(
        KeyStore trustStore, KeyStore mtlsKeyStore, String mtlsKeyStorePassword)
        throws GeneralSecurityException {
      if (mtlsKeyStore != null && mtlsKeyStore.size() > 0) {
        this.isMtls = true;
```