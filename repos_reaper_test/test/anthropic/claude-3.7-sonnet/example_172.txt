<think>
No reasoning found</think>
Looking at the merge conflict, I need to carefully analyze what both sides are trying to achieve. Here's my resolution:

```java
>>>>>>> 1488b22ce313803d012c8ace36c3b12f930ee309
        } else {
            // It might be a glob
            if (!globMatchesFiles(elem, elem.getDataStorage())) {
                throw new IOException(elem.toString() + " does not exist");
            } else {
                elements = getFileElementDescriptors(elem); 
                return new DataStorageInputStreamIterator(elements);
            }
        }
        
        return new DataStorageInputStreamIterator(elements);
```

The resolution incorporates the additional functionality from the incoming change (1488b22) where it handles the case when the glob matches files by setting the elements and immediately returning an iterator. This makes the final return statement unreachable for the glob case, which appears to be the intended behavior of the incoming change.