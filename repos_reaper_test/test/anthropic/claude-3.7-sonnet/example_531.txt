<think>
No reasoning found</think>
After analyzing the merge conflict, I need to understand the semantics of what both sides are trying to achieve. 

The original code is checking if either the left or right child is null before splicing, while the incoming change is specifically checking if the right child is `nil`. Without more context about what `nil` represents in this tree implementation, the intent is somewhat ambiguous. It appears this might be a transition from using `null` to using a sentinel `nil` node.

Since I can't determine which approach is correct without more context, I'll return the snippet with the conflict preserved:

```java
	/**
	 * Remove the node u from the binary search tree
	 * @param u
	 */
	protected void remove(Node u) {
<<<<<<< HEAD
		if (u.left == null || u.right == null) {
=======
		if (u.right == nil) {
>>>>>>> 2729e32788bc1fe1d320a3ba0e5fe5a7bddc630a
			splice(u);
		} else {
			Node w = u.right;
			while (w.left != nil) 
				w = w.left;
```